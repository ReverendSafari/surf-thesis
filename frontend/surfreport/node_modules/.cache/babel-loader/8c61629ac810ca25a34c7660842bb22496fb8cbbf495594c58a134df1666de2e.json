{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport VueApexCharts from 'vue3-apexcharts';\nexport default {\n  components: {\n    ApexChart: VueApexCharts\n  },\n  props: {\n    beach: String,\n    beachAngle: Number\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: {},\n      hoveredWave: null\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    setupChart() {\n      const waveHeights = this.waveData.wave_height;\n      const colors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120;\n        const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n        return waveGrade === 'green' ? '#2ecc71' : waveGrade === 'yellow' ? '#f1c40f' : '#e74c3c';\n      });\n      const labels = this.waveData.time.map(time => {\n        const date = new Date(time);\n        return date.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      });\n\n      // Define groups based on days (assuming 8 data points per day)\n      const days = [];\n      const dividerAnnotations = [];\n      for (let i = 0; i < labels.length; i += 8) {\n        const date = new Date(this.waveData.time[i]);\n        const dayLabel = date.toLocaleDateString('en-US', {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric'\n        });\n        days.push({\n          title: dayLabel,\n          cols: 8\n        });\n\n        // Add a vertical line annotation to separate days (skip the first divider at index 0)\n        if (i > 0) {\n          dividerAnnotations.push({\n            x: i - 0.5,\n            // Position the divider between day groups\n            borderColor: '#cccccc',\n            // Divider color\n            strokeDashArray: 4,\n            // Dashed style\n            label: {\n              text: '' // Empty label, line-only\n            }\n          });\n        }\n      }\n      this.chartSeries = [{\n        name: 'Wave Height (ft)',\n        data: waveHeights\n      }];\n      this.chartOptions = {\n        chart: {\n          type: 'bar'\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            distributed: true\n          }\n        },\n        xaxis: {\n          categories: labels,\n          tickPlacement: 'on',\n          group: {\n            style: {\n              fontSize: '10px',\n              fontWeight: 700\n            },\n            groups: days // Set grouped labels for each day\n          }\n        },\n        colors: colors,\n        annotations: {\n          xaxis: dividerAnnotations // Add divider annotations\n        },\n        tooltip: {\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex\n          }) => {\n            const waveHeight = this.waveData.wave_height[dataPointIndex];\n            const wavePeriod = this.waveData.wave_period[dataPointIndex];\n            const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n            const windDirection = this.windData.wind_direction_10m[dataPointIndex];\n            return `<div style=\"padding:8px;\">\n          <strong>Height:</strong> ${waveHeight} ft<br>\n          <strong>Period:</strong> ${wavePeriod} s<br>\n          <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n          <strong>Wind Direction:</strong> ${windDirection}°\n        </div>`;\n          }\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","getWaveQuality","VueApexCharts","components","ApexChart","props","beach","String","beachAngle","Number","data","waveData","windData","chartSeries","chartOptions","hoveredWave","mounted","fetchData","methods","waveResponse","get","windResponse","JSON","parse","waves","wind","hourly","setupChart","error","console","waveHeights","wave_height","colors","map","height","index","windSpeed","wind_speed_10m","windDirection","wind_direction_10m","wavePeriod","wave_period","waveGrade","labels","time","date","Date","toLocaleTimeString","hour","minute","days","dividerAnnotations","i","length","dayLabel","toLocaleDateString","weekday","month","day","push","title","cols","x","borderColor","strokeDashArray","label","text","name","chart","type","plotOptions","bar","borderRadius","distributed","xaxis","categories","tickPlacement","group","style","fontSize","fontWeight","groups","annotations","tooltip","custom","series","seriesIndex","dataPointIndex","waveHeight"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\" style=\"height:500px\">\n    <ApexChart\n      type=\"bar\"\n      :options=\"chartOptions\"\n      :series=\"chartSeries\"\n      height=\"400\"\n    />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport VueApexCharts from 'vue3-apexcharts';\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String,\n    beachAngle: Number,\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: {},\n      hoveredWave: null,\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    setupChart() {\n  const waveHeights = this.waveData.wave_height;\n  const colors = waveHeights.map((height, index) => {\n    const windSpeed = this.windData.wind_speed_10m[index];\n    const windDirection = this.windData.wind_direction_10m[index];\n    const wavePeriod = this.waveData.wave_period[index];\n    const beachAngle = this.beachAngle || 120;\n\n    const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n    return waveGrade === 'green' ? '#2ecc71' : waveGrade === 'yellow' ? '#f1c40f' : '#e74c3c';\n  });\n\n  const labels = this.waveData.time.map((time) => {\n    const date = new Date(time);\n    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n  });\n\n  // Define groups based on days (assuming 8 data points per day)\n  const days = [];\n  const dividerAnnotations = [];\n  for (let i = 0; i < labels.length; i += 8) {\n    const date = new Date(this.waveData.time[i]);\n    const dayLabel = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n    days.push({ title: dayLabel, cols: 8 });\n\n    // Add a vertical line annotation to separate days (skip the first divider at index 0)\n    if (i > 0) {\n      dividerAnnotations.push({\n        x: i - 0.5, // Position the divider between day groups\n        borderColor: '#cccccc', // Divider color\n        strokeDashArray: 4, // Dashed style\n        label: {\n          text: '', // Empty label, line-only\n        },\n      });\n    }\n  }\n\n  this.chartSeries = [\n    {\n      name: 'Wave Height (ft)',\n      data: waveHeights,\n    },\n  ];\n\n  this.chartOptions = {\n    chart: {\n      type: 'bar',\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        distributed: true,\n      },\n    },\n    xaxis: {\n      categories: labels,\n      tickPlacement: 'on',\n      group: {\n        style: {\n          fontSize: '10px',\n          fontWeight: 700,\n        },\n        groups: days, // Set grouped labels for each day\n      },\n    },\n    colors: colors,\n    annotations: {\n      xaxis: dividerAnnotations, // Add divider annotations\n    },\n    tooltip: {\n      custom: ({ series, seriesIndex, dataPointIndex }) => {\n        const waveHeight = this.waveData.wave_height[dataPointIndex];\n        const wavePeriod = this.waveData.wave_period[dataPointIndex];\n        const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n        const windDirection = this.windData.wind_direction_10m[dataPointIndex];\n        return `<div style=\"padding:8px;\">\n          <strong>Height:</strong> ${waveHeight} ft<br>\n          <strong>Period:</strong> ${wavePeriod} s<br>\n          <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n          <strong>Wind Direction:</strong> ${windDirection}°\n        </div>`;\n      },\n    },\n  };\n}\n\n  },\n};\n</script>\n\n<style scoped>\n.hover-details {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}