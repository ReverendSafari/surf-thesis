{"ast":null,"code":"import axios from 'axios';\nexport default {\n  props: {\n    beach: String // Beach name passed from the parent component\n  },\n  data() {\n    return {\n      windData: [],\n      // Stores the fetched wind data\n      closestWind: null // Stores the closest wind data to the current time\n    };\n  },\n  computed: {\n    // Compute the cardinal direction label from degrees\n    windDirectionLabel() {\n      if (!this.closestWind) return '';\n      const direction = this.closestWind.direction;\n      return this.convertDegreesToCardinal(direction);\n    }\n  },\n  methods: {\n    // Fetch wind data from the API\n    async fetchWind() {\n      try {\n        const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n        const windData = JSON.parse(response.data.wind);\n\n        // Find the closest wind data point\n        const closestTimeIndex = this.findClosestTimeIndex(windData.hourly.time);\n        this.closestWind = {\n          time: windData.hourly.time[closestTimeIndex],\n          speed: windData.hourly.wind_speed_10m[closestTimeIndex],\n          direction: windData.hourly.wind_direction_10m[closestTimeIndex]\n        };\n      } catch (error) {\n        console.error('Error fetching wind data:', error);\n      }\n    },\n    // Find the closest time index to the current time (EST)\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const windTime = new Date(time);\n        return Math.abs(windTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n    // Convert degrees to cardinal direction\n    convertDegreesToCardinal(degrees) {\n      const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n      const index = Math.round(degrees % 360 / 22.5);\n      return directions[index];\n    }\n  },\n  watch: {\n    // Refetch the wind data whenever the beach changes\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWind();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","beach","String","data","windData","closestWind","computed","windDirectionLabel","direction","convertDegreesToCardinal","methods","fetchWind","response","get","JSON","parse","wind","closestTimeIndex","findClosestTimeIndex","hourly","time","speed","wind_speed_10m","wind_direction_10m","error","console","times","currentTime","Date","timeDifferences","map","windTime","Math","abs","indexOf","min","degrees","directions","index","round","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWindComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6 border rounded-lg w-full max-w-md text-center mt-4\">\n      <h3 class=\"text-xl mb-4\">Current Wind Information for {{ beach }}</h3>\n  \n      <!-- Check if wind data is available -->\n      <div v-if=\"closestWind\">\n        <p><strong>Wind Speed:</strong> {{ closestWind.speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ windDirectionLabel }} ({{ closestWind.direction }}Â°)</p>\n      </div>\n  \n      <div v-else>\n        <p>No wind data available.</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    props: {\n      beach: String, // Beach name passed from the parent component\n    },\n    data() {\n      return {\n        windData: [], // Stores the fetched wind data\n        closestWind: null, // Stores the closest wind data to the current time\n      };\n    },\n    computed: {\n      // Compute the cardinal direction label from degrees\n      windDirectionLabel() {\n        if (!this.closestWind) return '';\n        const direction = this.closestWind.direction;\n        return this.convertDegreesToCardinal(direction);\n      },\n    },\n    methods: {\n      // Fetch wind data from the API\n      async fetchWind() {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n          const windData = JSON.parse(response.data.wind);\n  \n          // Find the closest wind data point\n          const closestTimeIndex = this.findClosestTimeIndex(windData.hourly.time);\n          this.closestWind = {\n            time: windData.hourly.time[closestTimeIndex],\n            speed: windData.hourly.wind_speed_10m[closestTimeIndex],\n            direction: windData.hourly.wind_direction_10m[closestTimeIndex],\n          };\n        } catch (error) {\n          console.error('Error fetching wind data:', error);\n        }\n      },\n  \n      // Find the closest time index to the current time (EST)\n      findClosestTimeIndex(times) {\n        const currentTime = new Date();\n        const timeDifferences = times.map(time => {\n          const windTime = new Date(time);\n          return Math.abs(windTime - currentTime);\n        });\n        return timeDifferences.indexOf(Math.min(...timeDifferences));\n      },\n  \n      // Convert degrees to cardinal direction\n      convertDegreesToCardinal(degrees) {\n        const directions = [\n          'N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',\n          'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'\n        ];\n        const index = Math.round((degrees % 360) / 22.5);\n        return directions[index];\n      },\n    },\n    watch: {\n      // Refetch the wind data whenever the beach changes\n      beach: {\n        immediate: true,\n        handler() {\n          this.fetchWind();\n        },\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Basic styling for MVP */\n  </style>\n  "],"mappings":"AAiBE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,KAAK,EAAE;IACLC,KAAK,EAAEC,MAAM,CAAE;EACjB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAAC,IAAI,CAACF,WAAW,EAAE,OAAO,EAAE;MAChC,MAAMG,SAAQ,GAAI,IAAI,CAACH,WAAW,CAACG,SAAS;MAC5C,OAAO,IAAI,CAACC,wBAAwB,CAACD,SAAS,CAAC;IACjD;EACF,CAAC;EACDE,OAAO,EAAE;IACP;IACA,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,yEAAyE,IAAI,CAACZ,KAAK,EAAE,CAAC;QACvH,MAAMG,QAAO,GAAIU,IAAI,CAACC,KAAK,CAACH,QAAQ,CAACT,IAAI,CAACa,IAAI,CAAC;;QAE/C;QACA,MAAMC,gBAAe,GAAI,IAAI,CAACC,oBAAoB,CAACd,QAAQ,CAACe,MAAM,CAACC,IAAI,CAAC;QACxE,IAAI,CAACf,WAAU,GAAI;UACjBe,IAAI,EAAEhB,QAAQ,CAACe,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC;UAC5CI,KAAK,EAAEjB,QAAQ,CAACe,MAAM,CAACG,cAAc,CAACL,gBAAgB,CAAC;UACvDT,SAAS,EAAEJ,QAAQ,CAACe,MAAM,CAACI,kBAAkB,CAACN,gBAAgB;QAChE,CAAC;MACH,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAED;IACAN,oBAAoBA,CAACQ,KAAK,EAAE;MAC1B,MAAMC,WAAU,GAAI,IAAIC,IAAI,CAAC,CAAC;MAC9B,MAAMC,eAAc,GAAIH,KAAK,CAACI,GAAG,CAACV,IAAG,IAAK;QACxC,MAAMW,QAAO,GAAI,IAAIH,IAAI,CAACR,IAAI,CAAC;QAC/B,OAAOY,IAAI,CAACC,GAAG,CAACF,QAAO,GAAIJ,WAAW,CAAC;MACzC,CAAC,CAAC;MACF,OAAOE,eAAe,CAACK,OAAO,CAACF,IAAI,CAACG,GAAG,CAAC,GAAGN,eAAe,CAAC,CAAC;IAC9D,CAAC;IAED;IACApB,wBAAwBA,CAAC2B,OAAO,EAAE;MAChC,MAAMC,UAAS,GAAI,CACjB,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAChD,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAE,CACrD;MACD,MAAMC,KAAI,GAAIN,IAAI,CAACO,KAAK,CAAEH,OAAM,GAAI,GAAG,GAAI,IAAI,CAAC;MAChD,OAAOC,UAAU,CAACC,KAAK,CAAC;IAC1B;EACF,CAAC;EACDE,KAAK,EAAE;IACL;IACAvC,KAAK,EAAE;MACLwC,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAAC/B,SAAS,CAAC,CAAC;MAClB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}