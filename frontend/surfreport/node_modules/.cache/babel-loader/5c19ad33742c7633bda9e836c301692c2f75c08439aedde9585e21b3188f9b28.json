{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\",\n  style: {\n    \"height\": \"500px\"\n  }\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"hover-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ApexChart = _resolveComponent(\"ApexChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ApexChart, {\n    type: \"bar\",\n    options: $data.chartOptions,\n    series: $data.chartSeries,\n    height: \"400\"\n  }, null, 8 /* PROPS */, [\"options\", \"series\"]), _createCommentVNode(\" Detailed Wave Summary on Hover (Optional) \"), $data.hoveredWave ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"strong\", null, \"Wave Height:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.height) + \" ft\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Wave Period:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.period) + \" seconds\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Wind Speed:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.wind_speed) + \" kn\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Wind Direction:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.wind_direction) + \"°\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","style","key","_createElementBlock","_hoisted_1","_createVNode","_component_ApexChart","type","options","$data","chartOptions","series","chartSeries","height","_createCommentVNode","hoveredWave","_hoisted_2","_createElementVNode","_createTextVNode","_toDisplayString","period","wind_speed","wind_direction"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\" style=\"height:500px\">\n    <ApexChart\n      type=\"bar\"\n      :options=\"chartOptions\"\n      :series=\"chartSeries\"\n      height=\"400\"\n    />\n\n    <!-- Detailed Wave Summary on Hover (Optional) -->\n    <div v-if=\"hoveredWave\" class=\"hover-details\">\n      <p><strong>Wave Height:</strong> {{ hoveredWave.height }} ft</p>\n      <p><strong>Wave Period:</strong> {{ hoveredWave.period }} seconds</p>\n      <p><strong>Wind Speed:</strong> {{ hoveredWave.wind_speed }} kn</p>\n      <p><strong>Wind Direction:</strong> {{ hoveredWave.wind_direction }}°</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport VueApexCharts from 'vue3-apexcharts';\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String,\n    beachAngle: Number,\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: {},\n      hoveredWave: null,\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    setupChart() {\n      const waveHeights = this.waveData.wave_height;\n      const labels = this.waveData.time.map((time) => {\n        const date = new Date(time);\n        return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n      });\n\n      const colors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120;\n\n        const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n        return waveGrade === 'green' ? '#2ecc71' : waveGrade === 'yellow' ? '#f1c40f' : '#e74c3c';\n      });\n\n      this.chartSeries = [\n        {\n          name: 'Wave Height (ft)',\n          data: waveHeights,\n        },\n      ];\n\n      this.chartOptions = {\n        chart: {\n          type: 'bar',\n          events: {\n            dataPointMouseEnter: (event, chartContext, { dataPointIndex }) => {\n              this.hoveredWave = {\n                height: this.waveData.wave_height[dataPointIndex],\n                period: this.waveData.wave_period[dataPointIndex],\n                wind_speed: this.windData.wind_speed_10m[dataPointIndex],\n                wind_direction: this.windData.wind_direction_10m[dataPointIndex],\n              };\n            },\n          },\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            distributed: true,\n          },\n        },\n        xaxis: {\n          categories: labels,\n          tickPlacement: 'on',\n        },\n        colors: colors,\n        tooltip: {\n          custom: ({ series, seriesIndex, dataPointIndex }) => {\n            const waveHeight = this.waveData.wave_height[dataPointIndex];\n            const wavePeriod = this.waveData.wave_period[dataPointIndex];\n            const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n            const windDirection = this.windData.wind_direction_10m[dataPointIndex];\n            return `<div style=\"padding:8px;\">\n              <strong>Height:</strong> ${waveHeight} ft<br>\n              <strong>Period:</strong> ${wavePeriod} s<br>\n              <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n              <strong>Wind Direction:</strong> ${windDirection}°\n            </div>`;\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n.hover-details {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC,KAAK;EAACC,KAAoB,EAApB;IAAA;EAAA;;;EADnBC,GAAA;EAU4BF,KAAK,EAAC;;;;uBAThCG,mBAAA,CAeM,OAfNC,UAeM,GAdJC,YAAA,CAKEC,oBAAA;IAJAC,IAAI,EAAC,KAAK;IACTC,OAAO,EAAEC,KAAA,CAAAC,YAAY;IACrBC,MAAM,EAAEF,KAAA,CAAAG,WAAW;IACpBC,MAAM,EAAC;kDAGTC,mBAAA,+CAAkD,EACvCL,KAAA,CAAAM,WAAW,I,cAAtBZ,mBAAA,CAKM,OALNa,UAKM,GAJJC,mBAAA,CAAgE,Y,0BAA7DA,mBAAA,CAA6B,gBAArB,cAAY,sBAX7BC,gBAAA,CAWsC,GAAC,GAAAC,gBAAA,CAAGV,KAAA,CAAAM,WAAW,CAACF,MAAM,IAAG,KAAG,gB,GAC5DI,mBAAA,CAAqE,Y,0BAAlEA,mBAAA,CAA6B,gBAArB,cAAY,sBAZ7BC,gBAAA,CAYsC,GAAC,GAAAC,gBAAA,CAAGV,KAAA,CAAAM,WAAW,CAACK,MAAM,IAAG,UAAQ,gB,GACjEH,mBAAA,CAAmE,Y,0BAAhEA,mBAAA,CAA4B,gBAApB,aAAW,sBAb5BC,gBAAA,CAaqC,GAAC,GAAAC,gBAAA,CAAGV,KAAA,CAAAM,WAAW,CAACM,UAAU,IAAG,KAAG,gB,GAC/DJ,mBAAA,CAAyE,Y,0BAAtEA,mBAAA,CAAgC,gBAAxB,iBAAe,sBAdhCC,gBAAA,CAcyC,GAAC,GAAAC,gBAAA,CAAGV,KAAA,CAAAM,WAAW,CAACO,cAAc,IAAG,GAAC,gB,OAd3ER,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}