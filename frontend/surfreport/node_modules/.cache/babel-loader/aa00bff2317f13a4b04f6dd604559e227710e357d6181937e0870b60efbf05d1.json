{"ast":null,"code":"import { Chart, BarController, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\nimport axios from 'axios';\nexport default {\n  props: {\n    beach: String\n  },\n  data() {\n    return {\n      windData: [],\n      hoveredWind: null\n    };\n  },\n  mounted() {\n    this.fetchWindData();\n  },\n  methods: {\n    async fetchWindData() {\n      try {\n        const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n        const windData = JSON.parse(response.data.wind).hourly;\n        this.windData = windData;\n        this.buildChart();\n      } catch (error) {\n        console.error('Error fetching wind data:', error);\n        this.windData = {\n          wind_speed_10m: [],\n          wind_direction_10m: []\n        };\n      }\n    },\n    buildChart() {\n      const ctx = this.$refs.windChart.getContext('2d');\n      Chart.register(BarController, CategoryScale, LinearScale, BarElement, Tooltip, Legend);\n      const windSpeeds = this.windData.wind_speed_10m;\n      const windDirections = this.windData.wind_direction_10m;\n      const labels = this.windData.time.map(time => {\n        const date = new Date(time);\n        return date.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      });\n      const directionArrows = windDirections.map(dir => this.getArrowDirection(dir));\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Wind Speed (kn)',\n            data: windSpeeds,\n            backgroundColor: 'lightblue'\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: tooltipItem => {\n                  const index = tooltipItem.dataIndex;\n                  const windSpeed = windSpeeds[index];\n                  const windDirection = windDirections[index];\n                  const cardinalDirection = this.getCardinalDirection(windDirection);\n                  this.hoveredWind = {\n                    speed: windSpeed,\n                    direction: windDirection,\n                    cardinal: cardinalDirection\n                  };\n                  return `Speed: ${windSpeed} kn, Direction: ${windDirection}° (${cardinalDirection})`;\n                }\n              }\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                callback: (value, index) => labels[index]\n              }\n            }\n          }\n        },\n        plugins: [{\n          id: 'directionArrows',\n          afterDraw: chart => {\n            const ctx = chart.ctx;\n            const xAxis = chart.scales['x'];\n            directionArrows.forEach((arrow, i) => {\n              ctx.fillText(arrow, xAxis.getPixelForTick(i), chart.chartArea.bottom + 10);\n              ctx.fillText(windSpeeds[i] + ' kn', xAxis.getPixelForTick(i), chart.chartArea.bottom + 25);\n            });\n          }\n        }]\n      });\n    },\n    getArrowDirection(degree) {\n      // Logic to convert degrees to arrow symbol\n      if (degree >= 0 && degree < 45) return '↑';\n      if (degree >= 45 && degree < 135) return '→';\n      if (degree >= 135 && degree < 225) return '↓';\n      if (degree >= 225 && degree < 315) return '←';\n      return '↑';\n    },\n    getCardinalDirection(degree) {\n      // Return cardinal direction based on degrees\n      if (degree >= 0 && degree < 45) return 'N';\n      if (degree >= 45 && degree < 90) return 'NE';\n      if (degree >= 90 && degree < 135) return 'E';\n      if (degree >= 135 && degree < 180) return 'SE';\n      if (degree >= 180 && degree < 225) return 'S';\n      if (degree >= 225 && degree < 270) return 'SW';\n      if (degree >= 270 && degree < 315) return 'W';\n      return 'NW';\n    }\n  }\n};","map":{"version":3,"names":["Chart","BarController","CategoryScale","LinearScale","BarElement","Tooltip","Legend","axios","props","beach","String","data","windData","hoveredWind","mounted","fetchWindData","methods","response","get","JSON","parse","wind","hourly","buildChart","error","console","wind_speed_10m","wind_direction_10m","ctx","$refs","windChart","getContext","register","windSpeeds","windDirections","labels","time","map","date","Date","toLocaleTimeString","hour","minute","directionArrows","dir","getArrowDirection","type","datasets","label","backgroundColor","options","responsive","plugins","tooltip","callbacks","tooltipItem","index","dataIndex","windSpeed","windDirection","cardinalDirection","getCardinalDirection","speed","direction","cardinal","scales","x","ticks","callback","value","id","afterDraw","chart","xAxis","forEach","arrow","i","fillText","getPixelForTick","chartArea","bottom","degree"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWindComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6\" style=\"height:500px\">\n      <canvas ref=\"windChart\" style=\"height: 100px; width: 700px;\"></canvas>\n      <div v-if=\"hoveredWind\" class=\"hover-details\">\n        <p><strong>Wind Strength:</strong> {{ hoveredWind.speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ hoveredWind.direction }}° ({{ hoveredWind.cardinal }})</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Chart, BarController, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\n  import axios from 'axios';\n  \n  export default {\n    props: {\n      beach: String,\n    },\n    data() {\n      return {\n        windData: [],\n        hoveredWind: null,\n      };\n    },\n    mounted() {\n      this.fetchWindData();\n    },\n    methods: {\n      async fetchWindData() {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n          const windData = JSON.parse(response.data.wind).hourly;\n          this.windData = windData;\n          this.buildChart();\n        } catch (error) {\n          console.error('Error fetching wind data:', error);\n          this.windData = { wind_speed_10m: [], wind_direction_10m: [] };\n        }\n      },\n      buildChart() {\n        const ctx = this.$refs.windChart.getContext('2d');\n        Chart.register(BarController, CategoryScale, LinearScale, BarElement, Tooltip, Legend);\n  \n        const windSpeeds = this.windData.wind_speed_10m;\n        const windDirections = this.windData.wind_direction_10m;\n        const labels = this.windData.time.map(time => {\n          const date = new Date(time);\n          return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n        });\n  \n        const directionArrows = windDirections.map(dir => this.getArrowDirection(dir));\n  \n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Wind Speed (kn)',\n              data: windSpeeds,\n              backgroundColor: 'lightblue',\n            }],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  label: (tooltipItem) => {\n                    const index = tooltipItem.dataIndex;\n                    const windSpeed = windSpeeds[index];\n                    const windDirection = windDirections[index];\n                    const cardinalDirection = this.getCardinalDirection(windDirection);\n                    \n                    this.hoveredWind = {\n                      speed: windSpeed,\n                      direction: windDirection,\n                      cardinal: cardinalDirection,\n                    };\n                    return `Speed: ${windSpeed} kn, Direction: ${windDirection}° (${cardinalDirection})`;\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                ticks: {\n                  callback: (value, index) => labels[index],\n                }\n              }\n            }\n          },\n          plugins: [{\n            id: 'directionArrows',\n            afterDraw: (chart) => {\n              const ctx = chart.ctx;\n              const xAxis = chart.scales['x'];\n              directionArrows.forEach((arrow, i) => {\n                ctx.fillText(arrow, xAxis.getPixelForTick(i), chart.chartArea.bottom + 10);\n                ctx.fillText(windSpeeds[i] + ' kn', xAxis.getPixelForTick(i), chart.chartArea.bottom + 25);\n              });\n            }\n          }]\n        });\n      },\n      getArrowDirection(degree) {\n        // Logic to convert degrees to arrow symbol\n        if (degree >= 0 && degree < 45) return '↑';\n        if (degree >= 45 && degree < 135) return '→';\n        if (degree >= 135 && degree < 225) return '↓';\n        if (degree >= 225 && degree < 315) return '←';\n        return '↑';\n      },\n      getCardinalDirection(degree) {\n        // Return cardinal direction based on degrees\n        if (degree >= 0 && degree < 45) return 'N';\n        if (degree >= 45 && degree < 90) return 'NE';\n        if (degree >= 90 && degree < 135) return 'E';\n        if (degree >= 135 && degree < 180) return 'SE';\n        if (degree >= 180 && degree < 225) return 'S';\n        if (degree >= 225 && degree < 270) return 'SW';\n        if (degree >= 270 && degree < 315) return 'W';\n        return 'NW';\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .hover-details {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    background-color: #f9f9f9;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}