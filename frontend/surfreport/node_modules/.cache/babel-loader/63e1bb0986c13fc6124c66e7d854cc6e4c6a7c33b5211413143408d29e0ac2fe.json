{"ast":null,"code":"import axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport GradeDisplay from './GradeDisplay.vue';\nexport default {\n  props: {\n    beach: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      waveData: [],\n      // Stores the fetched wave data\n      closestWave: null,\n      // Stores the closest wave data to the current time\n      waveGrade: '',\n      // Stores the wave quality grade\n      beachAngle: 0 // Stores the beach angle from the API\n    };\n  },\n  components: {\n    GradeDisplay\n  },\n  computed: {\n    // Compute the wave height range\n    waveHeightRange() {\n      const height = this.closestWave ? this.closestWave.height : 0;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    }\n  },\n  methods: {\n    // Fetch wave data from the API\n    async fetchWaves() {\n      if (this.beach) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex]\n          };\n          const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach);\n          if (beachData) {\n            this.beachAngle = beachData.beach_angle;\n          }\n          this.waveGrade = getWaveQuality(this.closestWave.direction, 10, this.closestWave.period, this.beachAngle, this.closestWave.height);\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      }\n    },\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    }\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","getWaveQuality","GradeDisplay","props","beach","type","String","required","data","waveData","closestWave","waveGrade","beachAngle","components","computed","waveHeightRange","height","methods","fetchWaves","response","get","JSON","parse","waves","closestTimeIndex","findClosestTimeIndex","hourly","time","wave_height","direction","wave_direction","period","wave_period","beachResponse","beachData","beaches","find","b","beach_name","beach_angle","error","console","times","currentTime","Date","timeDifferences","map","waveTime","Math","abs","indexOf","min","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-start\">\n    <h3 class=\"text-sm font-semibold mb-1\">Current Wave</h3>\n\n    <!-- Wave Height with Range -->\n    <p class=\"text-gray-600\">Wave Height</p>\n    <p class=\"text-2xl font-bold\">{{ waveHeightRange }} ({{ closestWave.height }} ft)</p>\n\n    <!-- Wave Period -->\n    <p class=\"text-gray-600 mt-2\">Wave Period</p>\n    <p class=\"text-lg font-medium\">{{ closestWave.period }} seconds</p>\n\n    <!-- Wave Direction with Arrow -->\n    <p class=\"text-gray-600 mt-2\">Wave Direction</p>\n    <div class=\"flex items-center\">\n      <span :style=\"{ transform: 'rotate(' + closestWave.direction + 'deg)' }\" class=\"inline-block\">→</span>\n      <span class=\"text-lg font-bold ml-2\">({{ closestWave.direction }}°)</span>\n    </div>\n\n    <!-- Wave Quality Grade -->\n    <GradeDisplay :grade=\"waveGrade\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport GradeDisplay from './GradeDisplay.vue';\n\nexport default {\n  props: {\n    beach: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      waveData: [], // Stores the fetched wave data\n      closestWave: null, // Stores the closest wave data to the current time\n      waveGrade: '', // Stores the wave quality grade\n      beachAngle: 0, // Stores the beach angle from the API\n    };\n  },\n  components: {\n    GradeDisplay,\n  },\n  computed: {\n    // Compute the wave height range\n    waveHeightRange() {\n      const height = this.closestWave ? this.closestWave.height : 0;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    },\n  },\n  methods: {\n    // Fetch wave data from the API\n    async fetchWaves() {\n      if (this.beach) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex],\n          };\n\n          const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach);\n\n          if (beachData) {\n            this.beachAngle = beachData.beach_angle;\n          }\n\n          this.waveGrade = getWaveQuality(\n            this.closestWave.direction,\n            10,\n            this.closestWave.period,\n            this.beachAngle,\n            this.closestWave.height\n          );\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      }\n    },\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}