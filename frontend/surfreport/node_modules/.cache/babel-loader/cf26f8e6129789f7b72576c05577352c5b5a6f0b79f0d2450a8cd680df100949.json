{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      beaches: [],\n      // Holds the fetched beach data\n      selectedBeach: null // Now this will hold the full beach object, not just the name\n    };\n  },\n  methods: {\n    // Fetch beaches from the API\n    async fetchBeaches() {\n      try {\n        const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n        this.beaches = response.data.beaches;\n        if (this.beaches.length > 0) {\n          const queryBeachName = this.$route.query.beach;\n\n          // Match the query parameter with the beach list, or default to the first\n          const matchedBeach = this.beaches.find(beach => beach.beach_name === queryBeachName);\n          this.selectedBeach = matchedBeach || this.beaches[0];\n          this.updateBeach(); // Ensure the selected beach is emitted and the URL is updated\n        }\n      } catch (error) {\n        console.error('Error fetching beaches:', error);\n      }\n    },\n    // Emit the entire selected beach object to the parent component\n    updateBeach() {\n      if (this.selectedBeach) {\n        this.$emit('beachSelected', this.selectedBeach); // Emit the selected beach\n        this.$router.replace({\n          query: {\n            beach: this.selectedBeach.beach_name\n          }\n        }); // Update the URL without reloading\n      }\n    }\n  },\n  mounted() {\n    // Fetch beaches when the component is mounted\n    this.fetchBeaches();\n  }\n};","map":{"version":3,"names":["axios","data","beaches","selectedBeach","methods","fetchBeaches","response","get","length","queryBeachName","$route","query","beach","matchedBeach","find","beach_name","updateBeach","error","console","$emit","$router","replace","mounted"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/BeachSelector.vue"],"sourcesContent":["<template>\n  <div\n    class=\"relative h-20 w-full bg-cover bg-center flex items-center justify-center\"\n    :style=\"{ backgroundImage: `url(${require('@/assets/selectorBackground.jpg')})`, backgroundPosition: 'center' }\"\n  >\n    <!-- Overlay for dimming effect on the background image -->\n    <div class=\"absolute inset-0 bg-black opacity-30\"></div>\n\n    <!-- Centered content with dropdown and integrated search icon -->\n    <div class=\"relative z-10 flex flex-col items-center\">\n      <div class=\"relative w-96\">\n        <!-- Icon inside the select box -->\n        <img src=\"@/assets/search.svg\" alt=\"Search icon\" class=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500\" />\n        \n        <!-- Beach Dropdown -->\n        <select\n          v-if=\"beaches.length > 0\"\n          v-model=\"selectedBeach\"\n          @change=\"updateBeach\"\n          class=\"bg-white text-gray-700 pl-10 pr-4 py-2 border rounded-lg shadow-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option v-for=\"beach in beaches\" :key=\"beach.beach_name\" :value=\"beach\">\n            {{ beach.beach_name }} ({{ beach.town }}) <!-- Include the town in parentheses -->\n          </option>\n        </select>\n        \n        <div v-else class=\"text-gray-700\">Loading beaches...</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      beaches: [],        // Holds the fetched beach data\n      selectedBeach: null, // Now this will hold the full beach object, not just the name\n    };\n  },\n  methods: {\n    // Fetch beaches from the API\n    async fetchBeaches() {\n  try {\n    const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n    this.beaches = response.data.beaches;\n\n    if (this.beaches.length > 0) {\n      const queryBeachName = this.$route.query.beach;\n\n      // Match the query parameter with the beach list, or default to the first\n      const matchedBeach = this.beaches.find(beach => beach.beach_name === queryBeachName);\n      this.selectedBeach = matchedBeach || this.beaches[0];\n\n      this.updateBeach(); // Ensure the selected beach is emitted and the URL is updated\n    }\n  } catch (error) {\n    console.error('Error fetching beaches:', error);\n  }\n},\n\n    // Emit the entire selected beach object to the parent component\n    updateBeach() {\n  if (this.selectedBeach) {\n    this.$emit('beachSelected', this.selectedBeach); // Emit the selected beach\n    this.$router.replace({ query: { beach: this.selectedBeach.beach_name } }); // Update the URL without reloading\n  }\n},\n\n  },\n  mounted() {\n    // Fetch beaches when the component is mounted\n    this.fetchBeaches();\n  },\n};\n</script>\n\n<style scoped>\n/* Adjust background to focus on the center of the image */\n.bg-cover {\n  background-size: cover;\n  background-position: center bottom;\n}\n</style>\n"],"mappings":"AAkCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MAAS;MACpBC,aAAa,EAAE,IAAI,CAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,YAAYA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,0EAA0E,CAAC;QAC5G,IAAI,CAACL,OAAM,GAAII,QAAQ,CAACL,IAAI,CAACC,OAAO;QAEpC,IAAI,IAAI,CAACA,OAAO,CAACM,MAAK,GAAI,CAAC,EAAE;UAC3B,MAAMC,cAAa,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK;;UAE9C;UACA,MAAMC,YAAW,GAAI,IAAI,CAACX,OAAO,CAACY,IAAI,CAACF,KAAI,IAAKA,KAAK,CAACG,UAAS,KAAMN,cAAc,CAAC;UACpF,IAAI,CAACN,aAAY,GAAIU,YAAW,IAAK,IAAI,CAACX,OAAO,CAAC,CAAC,CAAC;UAEpD,IAAI,CAACc,WAAW,CAAC,CAAC,EAAE;QACtB;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEG;IACAD,WAAWA,CAAA,EAAG;MAChB,IAAI,IAAI,CAACb,aAAa,EAAE;QACtB,IAAI,CAACgB,KAAK,CAAC,eAAe,EAAE,IAAI,CAAChB,aAAa,CAAC,EAAE;QACjD,IAAI,CAACiB,OAAO,CAACC,OAAO,CAAC;UAAEV,KAAK,EAAE;YAAEC,KAAK,EAAE,IAAI,CAACT,aAAa,CAACY;UAAW;QAAE,CAAC,CAAC,EAAE;MAC7E;IACF;EAEE,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACjB,YAAY,CAAC,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}