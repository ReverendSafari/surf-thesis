{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6 border rounded-lg w-full max-w-md text-center mt-4\"\n};\nconst _hoisted_2 = {\n  class: \"text-3xl font-bold mb-2\"\n};\nconst _hoisted_3 = {\n  class: \"text-lg\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.beachName), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_3, _toDisplayString($data.town) + \", \" + _toDisplayString($data.state), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$data","beachName","_hoisted_3","town","state"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/BeachDisplay.vue"],"sourcesContent":["<template>\n    <div class=\"p-6 border rounded-lg w-full max-w-md text-center mt-4\">\n      <h1 class=\"text-3xl font-bold mb-2\">{{ beachName }}</h1>\n      <p class=\"text-lg\">{{ town }}, {{ state }}</p>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    props: {\n      beach: String,  // Beach name passed from the parent component\n    },\n    data() {\n      return {\n        beachName: '',  // Stores the beach name\n        town: '',       // Stores the beach town\n        state: '',      // Stores the beach state\n      };\n    },\n    methods: {\n      // Fetch beach data from the API\n      async fetchBeachData() {\n        try {\n          const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = response.data.beaches.find(b => b.beach_name === this.beach);\n          if (beachData) {\n            this.beachName = beachData.beach_name;\n            this.town = beachData.town;\n            this.state = beachData.state;\n          }\n        } catch (error) {\n          console.error('Error fetching beach data:', error);\n        }\n      },\n    },\n    watch: {\n      // Refetch the beach data whenever the beach changes\n      beach: {\n        immediate: true,\n        handler() {\n          this.fetchBeachData();\n        },\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Basic styling for MVP */\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAwD;;EAC7DA,KAAK,EAAC;AAAyB;;EAChCA,KAAK,EAAC;AAAS;;uBAFpBC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAAwD,MAAxDC,UAAwD,EAAAC,gBAAA,CAAjBC,KAAA,CAAAC,SAAS,kBAChDJ,mBAAA,CAA8C,KAA9CK,UAA8C,EAAAH,gBAAA,CAAxBC,KAAA,CAAAG,IAAI,IAAG,IAAE,GAAAJ,gBAAA,CAAGC,KAAA,CAAAI,KAAK,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}