{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      beaches: [],\n      // Holds the fetched beach data\n      selectedBeach: null // Stores the selected beach object\n    };\n  },\n  methods: {\n    // Fetch beaches from the API\n    async fetchBeaches() {\n      try {\n        const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n        this.beaches = response.data.beaches;\n        if (this.beaches.length > 0) {\n          this.selectedBeach = null; // Don't auto-select the first beach\n        }\n      } catch (error) {\n        console.error('Error fetching beaches:', error);\n      }\n    },\n    // Update the URL and emit the selected beach\n    updateBeach() {\n      if (this.selectedBeach) {\n        // Update the URL with the selected beach's name\n        this.$router.replace({\n          query: {\n            beach: this.selectedBeach.beach_name\n          }\n        });\n\n        // Emit the selected beach object to the parent component\n        this.$emit('beachSelected', this.selectedBeach);\n      }\n    }\n  },\n  mounted() {\n    // Fetch beaches when the component is mounted\n    this.fetchBeaches();\n\n    // Handle initial beach selection from URL\n    const beachFromQuery = this.$route.query.beach;\n    if (beachFromQuery) {\n      const matchingBeach = this.beaches.find(beach => beach.beach_name === beachFromQuery);\n      if (matchingBeach) {\n        this.selectedBeach = matchingBeach;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","beaches","selectedBeach","methods","fetchBeaches","response","get","length","error","console","updateBeach","$router","replace","query","beach","beach_name","$emit","mounted","beachFromQuery","$route","matchingBeach","find"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/BeachSelector.vue"],"sourcesContent":["<template>\n  <div\n    class=\"relative h-20 w-full bg-cover bg-center flex items-center justify-center\"\n    :style=\"{ backgroundImage: `url(${require('@/assets/selectorBackground.jpg')})`, backgroundPosition: 'center' }\"\n  >\n    <!-- Overlay for dimming effect on the background image -->\n    <div class=\"absolute inset-0 bg-black opacity-30\"></div>\n\n    <!-- Centered content with dropdown and integrated search icon -->\n    <div class=\"relative z-10 flex flex-col items-center\">\n      <div class=\"relative w-64\">\n        <!-- Icon inside the select box -->\n        <img src=\"@/assets/search.svg\" alt=\"Search icon\" class=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500\" />\n        \n        <!-- Beach Dropdown -->\n        <select\n          v-if=\"beaches.length > 0\"\n          v-model=\"selectedBeach\"\n          @change=\"updateBeach\"\n          class=\"bg-white text-gray-700 pl-10 pr-4 py-2 border rounded-lg shadow-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option v-for=\"beach in beaches\" :key=\"beach.beach_name\" :value=\"beach\">\n            {{ beach.beach_name }}\n          </option>\n        </select>\n        \n        <div v-else class=\"text-gray-700\">Loading beaches...</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      beaches: [],         // Holds the fetched beach data\n      selectedBeach: null, // Stores the selected beach object\n    };\n  },\n  methods: {\n    // Fetch beaches from the API\n    async fetchBeaches() {\n  try {\n    const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n    this.beaches = response.data.beaches;\n\n    if (this.beaches.length > 0) {\n      this.selectedBeach = null; // Don't auto-select the first beach\n    }\n  } catch (error) {\n    console.error('Error fetching beaches:', error);\n  }\n},\n\n    // Update the URL and emit the selected beach\n    updateBeach() {\n      if (this.selectedBeach) {\n        // Update the URL with the selected beach's name\n        this.$router.replace({ query: { beach: this.selectedBeach.beach_name } });\n\n        // Emit the selected beach object to the parent component\n        this.$emit('beachSelected', this.selectedBeach);\n      }\n    },\n  },\n  mounted() {\n    // Fetch beaches when the component is mounted\n    this.fetchBeaches();\n\n    // Handle initial beach selection from URL\n    const beachFromQuery = this.$route.query.beach;\n    if (beachFromQuery) {\n      const matchingBeach = this.beaches.find(beach => beach.beach_name === beachFromQuery);\n      if (matchingBeach) {\n        this.selectedBeach = matchingBeach;\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* Adjust background to focus on the center of the image */\n.bg-cover {\n  background-size: cover;\n  background-position: center bottom;\n}\n</style>\n"],"mappings":"AAiCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MAAU;MACrBC,aAAa,EAAE,IAAI,CAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,YAAYA,CAAA,EAAG;MACvB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,0EAA0E,CAAC;QAC5G,IAAI,CAACL,OAAM,GAAII,QAAQ,CAACL,IAAI,CAACC,OAAO;QAEpC,IAAI,IAAI,CAACA,OAAO,CAACM,MAAK,GAAI,CAAC,EAAE;UAC3B,IAAI,CAACL,aAAY,GAAI,IAAI,EAAE;QAC7B;MACF,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEG;IACAE,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACR,aAAa,EAAE;QACtB;QACA,IAAI,CAACS,OAAO,CAACC,OAAO,CAAC;UAAEC,KAAK,EAAE;YAAEC,KAAK,EAAE,IAAI,CAACZ,aAAa,CAACa;UAAW;QAAE,CAAC,CAAC;;QAEzE;QACA,IAAI,CAACC,KAAK,CAAC,eAAe,EAAE,IAAI,CAACd,aAAa,CAAC;MACjD;IACF;EACF,CAAC;EACDe,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACb,YAAY,CAAC,CAAC;;IAEnB;IACA,MAAMc,cAAa,GAAI,IAAI,CAACC,MAAM,CAACN,KAAK,CAACC,KAAK;IAC9C,IAAII,cAAc,EAAE;MAClB,MAAME,aAAY,GAAI,IAAI,CAACnB,OAAO,CAACoB,IAAI,CAACP,KAAI,IAAKA,KAAK,CAACC,UAAS,KAAMG,cAAc,CAAC;MACrF,IAAIE,aAAa,EAAE;QACjB,IAAI,CAAClB,aAAY,GAAIkB,aAAa;MACpC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}