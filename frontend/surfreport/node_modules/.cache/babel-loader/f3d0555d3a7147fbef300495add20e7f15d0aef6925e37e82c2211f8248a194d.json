{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\",\n  style: {\n    \"height\": \"500px\"\n  }\n};\nconst _hoisted_2 = {\n  ref: \"waveChart\",\n  style: {\n    \"height\": \"100px\",\n    \"width\": \"700px\"\n  }\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"hover-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Set the height directly in the canvas tag \"), _createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */), _createCommentVNode(\" Detailed Wave Summary on Hover (Optional) \"), $data.hoveredWave ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"strong\", null, \"Wave Height:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.height) + \" ft\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Wave Period:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.period) + \" seconds\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Wind Speed:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.wind_speed) + \" kn\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Wind Direction:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.wind_direction) + \"°\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","style","ref","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","$data","hoveredWave","_hoisted_3","_createTextVNode","_toDisplayString","height","period","wind_speed","wind_direction"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6\" style=\"height:500px\">\n      <!-- Set the height directly in the canvas tag -->\n      <canvas ref=\"waveChart\" style=\"height: 100px; width: 700px;\"></canvas>\n  \n      <!-- Detailed Wave Summary on Hover (Optional) -->\n      <div v-if=\"hoveredWave\" class=\"hover-details\">\n        <p><strong>Wave Height:</strong> {{ hoveredWave.height }} ft</p>\n        <p><strong>Wave Period:</strong> {{ hoveredWave.period }} seconds</p>\n        <p><strong>Wind Speed:</strong> {{ hoveredWave.wind_speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ hoveredWave.wind_direction }}°</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Chart, BarController, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n  import axios from 'axios';\n  import { getWaveQuality } from '../utils/waveGrading.js'; // Import the grading function\n  \n  export default {\n    props: {\n      beach: String,  // Beach name passed from the parent component\n      beachAngle: Number  // Beach angle passed from the parent component\n    },\n    data() {\n      return {\n        waveData: [],  // Array to store wave data\n        windData: [],  // Array to store wind data\n        hoveredWave: null,  // Stores data for the hovered wave\n      };\n    },\n    mounted() {\n      this.fetchData();\n    },\n    methods: {\n      // Fetch wave and wind data from the API\n      async fetchData() {\n        try {\n          const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n          const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n          \n          // Parse the response data\n          const waveData = JSON.parse(waveResponse.data.waves); // Parse the wave response\n          const windData = JSON.parse(windResponse.data.wind);   // Parse the wind response\n  \n          // Store the parsed data in the component's state\n          this.waveData = waveData.hourly;  // Storing the wave data\n          this.windData = windData.hourly;  // Storing the wind data\n  \n          console.log('Wave Data:', this.waveData);\n          console.log('Wind Data:', this.windData);\n  \n          // Build the chart after the data is successfully fetched\n          this.buildChart();\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          this.waveData = { wave_height: [], wave_period: [] }; // Fallback empty data\n          this.windData = { wind_speed_10m: [], wind_direction_10m: [] }; // Fallback empty data\n        }\n      },\n  \n      // Build the bar chart using Chart.js\n      buildChart() {\n        const ctx = this.$refs.waveChart.getContext('2d');\n  \n        // Register the necessary components from Chart.js\n        Chart.register(BarController, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n  \n        // Local reference to waveData and windData for use in chart\n        const waveData = this.waveData;\n        const windData = this.windData;\n  \n        // Prepare the datasets for the chart\n        const waveHeights = waveData.wave_height;\n        const labels = waveData.time.map(time => {\n          const date = new Date(time);\n          return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n        });\n  \n        // Apply the grading logic using getWaveQuality\n        const barColors = waveHeights.map((height, index) => {\n          const windSpeed = windData.wind_speed_10m[index];\n          const windDirection = windData.wind_direction_10m[index];\n          const wavePeriod = waveData.wave_period[index];\n          const beachAngle = this.beachAngle || 120;  // Use actual beach angle data if available\n  \n          // Get the wave quality using the utility function\n          const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n  \n          // Map the grade to a color\n          return waveGrade === 'green' ? 'green' :\n                 waveGrade === 'yellow' ? 'yellow' :\n                 'red';  // Default to red for poor waves\n        });\n  \n        // Custom plugin to display day labels above groups\n        const dayPlugin = {\n          id: 'dayLabels',\n          afterDraw: (chart) => {\n            const ctx = chart.ctx;\n            const xAxis = chart.scales['x']; // Get x-axis\n            const labels = chart.data.labels;\n            let currentDay = '';\n  \n            labels.forEach((label, index) => {\n              const date = new Date(waveData.time[index]);\n              const dayLabel = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n  \n              // Only draw the day if it's different from the previous day\n              if (dayLabel !== currentDay) {\n                currentDay = dayLabel;\n                ctx.fillText(dayLabel, xAxis.getPixelForTick(index), chart.chartArea.top - 10);\n              }\n            });\n          }\n        };\n  \n        // Create the chart using Chart.js\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Wave Height (ft)',\n              data: waveHeights,\n              backgroundColor: barColors,  // Use calculated colors based on grading\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  label: (tooltipItem) => {\n                    const index = tooltipItem.dataIndex;\n                    const waveHeight = waveData.wave_height[index];\n                    const wavePeriod = waveData.wave_period[index];\n                    const windSpeed = windData.wind_speed_10m[index];\n                    const windDirection = windData.wind_direction_10m[index];\n  \n                    // Display the detailed wave info in the tooltip\n                    this.hoveredWave = {\n                      height: waveHeight,\n                      period: wavePeriod,\n                      wind_speed: windSpeed,\n                      wind_direction: windDirection,\n                    };\n  \n                    return `Height: ${waveHeight} ft, Period: ${wavePeriod} s, Wind: ${windSpeed} kn, Dir: ${windDirection}°`;\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                ticks: {\n                  callback: function(value, index) {\n                    const date = new Date(waveData.time[index]);\n                    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n                  }\n                }\n              }\n            }\n          },\n          plugins: [dayPlugin]  // Add the custom plugin for day labels\n        });\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .hover-details {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    background-color: #f9f9f9;\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC,KAAK;EAACC,KAAoB,EAApB;IAAA;EAAA;;;EAEPC,GAAG,EAAC,WAAW;EAACD,KAAoC,EAApC;IAAA;IAAA;EAAA;;;EAH9BE,GAAA;EAM8BH,KAAK,EAAC;;;uBALhCI,mBAAA,CAWM,OAXNC,UAWM,GAVJC,mBAAA,+CAAkD,EAClDC,mBAAA,CAAsE,UAAtEC,UAAsE,+BAEtEF,mBAAA,+CAAkD,EACvCG,KAAA,CAAAC,WAAW,I,cAAtBN,mBAAA,CAKM,OALNO,UAKM,GAJJJ,mBAAA,CAAgE,Y,0BAA7DA,mBAAA,CAA6B,gBAArB,cAAY,sBAP/BK,gBAAA,CAOwC,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACI,MAAM,IAAG,KAAG,gB,GAC5DP,mBAAA,CAAqE,Y,0BAAlEA,mBAAA,CAA6B,gBAArB,cAAY,sBAR/BK,gBAAA,CAQwC,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACK,MAAM,IAAG,UAAQ,gB,GACjER,mBAAA,CAAmE,Y,0BAAhEA,mBAAA,CAA4B,gBAApB,aAAW,sBAT9BK,gBAAA,CASuC,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACM,UAAU,IAAG,KAAG,gB,GAC/DT,mBAAA,CAAyE,Y,0BAAtEA,mBAAA,CAAgC,gBAAxB,iBAAe,sBAVlCK,gBAAA,CAU2C,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACO,cAAc,IAAG,GAAC,gB,OAV7EX,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}