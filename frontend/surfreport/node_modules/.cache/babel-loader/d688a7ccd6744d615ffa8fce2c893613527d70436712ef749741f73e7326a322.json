{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\",\n  style: {\n    \"height\": \"500px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ApexChart = _resolveComponent(\"ApexChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ApexChart, {\n    type: \"bar\",\n    options: $data.chartOptions,\n    series: $data.chartSeries,\n    height: \"400\"\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_ApexChart","type","options","$data","chartOptions","series","chartSeries","height"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\" style=\"height:500px\">\n    <ApexChart\n      type=\"bar\"\n      :options=\"chartOptions\"\n      :series=\"chartSeries\"\n      height=\"400\"\n    />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport VueApexCharts from 'vue3-apexcharts';\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String,\n    beachAngle: Number,\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: {},\n      hoveredWave: null,\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    setupChart() {\n  const waveHeights = this.waveData.wave_height;\n  const colors = waveHeights.map((height, index) => {\n    const windSpeed = this.windData.wind_speed_10m[index];\n    const windDirection = this.windData.wind_direction_10m[index];\n    const wavePeriod = this.waveData.wave_period[index];\n    const beachAngle = this.beachAngle || 120;\n\n    const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n    return waveGrade === 'green' ? '#2ecc71' : waveGrade === 'yellow' ? '#f1c40f' : '#e74c3c';\n  });\n\n  const labels = this.waveData.time.map((time) => {\n    const date = new Date(time);\n    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n  });\n\n  // Define groups based on days (assuming 8 data points per day)\n  const days = [];\n  const dividerAnnotations = [];\n  for (let i = 0; i < labels.length; i += 8) {\n    const date = new Date(this.waveData.time[i]);\n    const dayLabel = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n    days.push({ title: dayLabel, cols: 8 });\n\n    // Add a vertical line annotation to separate days (skip the first divider at index 0)\n    if (i > 0) {\n      dividerAnnotations.push({\n        x: i - 0.5, // Position the divider between day groups\n        borderColor: '#cccccc', // Divider color\n        strokeDashArray: 4, // Dashed style\n        label: {\n          text: '', // Empty label, line-only\n        },\n      });\n    }\n  }\n\n  this.chartSeries = [\n    {\n      name: 'Wave Height (ft)',\n      data: waveHeights,\n    },\n  ];\n\n  this.chartOptions = {\n    chart: {\n      type: 'bar',\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        distributed: true,\n      },\n    },\n    xaxis: {\n      categories: labels,\n      tickPlacement: 'on',\n      group: {\n        style: {\n          fontSize: '10px',\n          fontWeight: 700,\n        },\n        groups: days, // Set grouped labels for each day\n      },\n    },\n    colors: colors,\n    annotations: {\n      xaxis: dividerAnnotations, // Add divider annotations\n    },\n    tooltip: {\n      custom: ({ series, seriesIndex, dataPointIndex }) => {\n        const waveHeight = this.waveData.wave_height[dataPointIndex];\n        const wavePeriod = this.waveData.wave_period[dataPointIndex];\n        const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n        const windDirection = this.windData.wind_direction_10m[dataPointIndex];\n        return `<div style=\"padding:8px;\">\n          <strong>Height:</strong> ${waveHeight} ft<br>\n          <strong>Period:</strong> ${wavePeriod} s<br>\n          <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n          <strong>Wind Direction:</strong> ${windDirection}Â°\n        </div>`;\n      },\n    },\n  };\n}\n\n  },\n};\n</script>\n\n<style scoped>\n.hover-details {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC,KAAK;EAACC,KAAoB,EAApB;IAAA;EAAA;;;;uBAAjBC,mBAAA,CAOM,OAPNC,UAOM,GANJC,YAAA,CAKEC,oBAAA;IAJAC,IAAI,EAAC,KAAK;IACTC,OAAO,EAAEC,KAAA,CAAAC,YAAY;IACrBC,MAAM,EAAEF,KAAA,CAAAG,WAAW;IACpBC,MAAM,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}