{"ast":null,"code":"import axios from 'axios';\nexport default {\n  props: {\n    beach: String // Beach name passed from the parent component\n  },\n  data() {\n    return {\n      airTemp: null,\n      // Stores air temperature\n      waterTemp: null // Stores water temperature\n    };\n  },\n  methods: {\n    // Fetch temperature data from the API\n    async fetchTemps() {\n      try {\n        const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/temps/${this.beach}`);\n        this.airTemp = response.data.air_temp;\n        this.waterTemp = response.data.water_temp;\n      } catch (error) {\n        console.error('Error fetching temperature data:', error);\n      }\n    }\n  },\n  watch: {\n    // Refetch the temperature data whenever the beach changes\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchTemps();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","beach","String","data","airTemp","waterTemp","methods","fetchTemps","response","get","air_temp","water_temp","error","console","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/TemperatureComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6 border rounded-lg w-full max-w-md text-center mt-4\">\n      <h3 class=\"text-xl mb-4\">Temperature Information for {{ beach }}</h3>\n  \n      <!-- Check if we have temperature data -->\n      <div v-if=\"airTemp && waterTemp\">\n        <p><strong>Air Temperature:</strong> {{ airTemp }}°F</p>\n        <p><strong>Water Temperature:</strong> {{ waterTemp }}°F</p>\n      </div>\n  \n      <div v-else>\n        <p>No temperature data available.</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    props: {\n      beach: String,  // Beach name passed from the parent component\n    },\n    data() {\n      return {\n        airTemp: null,    // Stores air temperature\n        waterTemp: null,  // Stores water temperature\n      };\n    },\n    methods: {\n      // Fetch temperature data from the API\n      async fetchTemps() {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/temps/${this.beach}`);\n          this.airTemp = response.data.air_temp;\n          this.waterTemp = response.data.water_temp;\n        } catch (error) {\n          console.error('Error fetching temperature data:', error);\n        }\n      },\n    },\n    watch: {\n      // Refetch the temperature data whenever the beach changes\n      beach: {\n        immediate: true,\n        handler() {\n          this.fetchTemps();\n        },\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Basic styling for MVP */\n  </style>\n  "],"mappings":"AAiBE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,KAAK,EAAE;IACLC,KAAK,EAAEC,MAAM,CAAG;EAClB,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MAAK;MAClBC,SAAS,EAAE,IAAI,CAAG;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,0EAA0E,IAAI,CAACR,KAAK,EAAE,CAAC;QACxH,IAAI,CAACG,OAAM,GAAII,QAAQ,CAACL,IAAI,CAACO,QAAQ;QACrC,IAAI,CAACL,SAAQ,GAAIG,QAAQ,CAACL,IAAI,CAACQ,UAAU;MAC3C,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF;EACF,CAAC;EACDE,KAAK,EAAE;IACL;IACAb,KAAK,EAAE;MACLc,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACT,UAAU,CAAC,CAAC;MACnB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}