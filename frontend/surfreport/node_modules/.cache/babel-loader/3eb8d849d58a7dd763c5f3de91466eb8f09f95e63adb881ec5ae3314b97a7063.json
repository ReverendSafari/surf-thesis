{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nimport _imports_0 from '@/assets/search.svg';\nconst _hoisted_1 = {\n  class: \"flex flex-col items-center\"\n};\nconst _hoisted_2 = {\n  class: \"relative w-96\"\n};\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", {\n    class: \"text-xl font-semibold mb-2\"\n  }, \"Select a Beach\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Increased width for longer names \"), _createCommentVNode(\" Icon inside the select box \"), _cache[3] || (_cache[3] = _createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"Search icon\",\n    class: \"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500\"\n  }, null, -1 /* HOISTED */)), _createCommentVNode(\" Dropdown for Beach Selection \"), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedBeach = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.goToDashboard && $options.goToDashboard(...args)),\n    class: \"bg-white text-gray-700 pl-10 pr-4 py-2 border rounded-lg shadow-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n  }, [_cache[2] || (_cache[2] = _createElementVNode(\"option\", {\n    disabled: \"\",\n    value: \"\"\n  }, \"Select a Beach\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.beaches, beach => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: beach.beach_name,\n      value: beach\n    }, _toDisplayString(beach.beach_name) + \" (\" + _toDisplayString(beach.town) + \") \", 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.selectedBeach]])])]);\n}","map":{"version":3,"names":["_imports_0","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","src","alt","_cache","$event","$data","selectedBeach","onChange","args","$options","goToDashboard","disabled","value","_Fragment","_renderList","beaches","beach","key","beach_name","_toDisplayString","town","_hoisted_3"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/HomeBeachSelector.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-center\">\n    <h2 class=\"text-xl font-semibold mb-2\">Select a Beach</h2>\n\n    <div class=\"relative w-96\"> <!-- Increased width for longer names -->\n      <!-- Icon inside the select box -->\n      <img src=\"@/assets/search.svg\" alt=\"Search icon\" class=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500\" />\n\n      <!-- Dropdown for Beach Selection -->\n      <select\n        v-model=\"selectedBeach\"\n        @change=\"goToDashboard\"\n        class=\"bg-white text-gray-700 pl-10 pr-4 py-2 border rounded-lg shadow-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        <option disabled value=\"\">Select a Beach</option>\n        <option v-for=\"beach in beaches\" :key=\"beach.beach_name\" :value=\"beach\">\n          {{ beach.beach_name }} ({{ beach.town }})\n        </option>\n      </select>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      beaches: [], // Holds the fetched beach data\n      selectedBeach: null, // Store the selected beach object\n    };\n  },\n  methods: {\n    async fetchBeaches() {\n      try {\n        const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n        this.beaches = response.data.beaches; // Store the list of beaches\n        if (this.beaches.length > 0) {\n          this.selectedBeach = this.beaches[0]; // Default to the first beach\n        }\n      } catch (error) {\n        console.error('Error fetching beaches:', error);\n      }\n    },\n    goToDashboard() {\n      if (this.selectedBeach) {\n        // Navigate to the dashboard with the selected beach name as a query parameter\n        this.$router.push({ name: 'dashboard', query: { beach: this.selectedBeach.beach_name } });\n      }\n    },\n  },\n  mounted() {\n    this.fetchBeaches(); // Fetch beaches on component mount\n  },\n};\n</script>\n\n<style scoped>\n/* Styling to ensure consistent appearance */\n.relative {\n  position: relative;\n}\n\n.w-96 {\n  width: 24rem;\n}\n\n.select {\n  background-position: left center;\n  background-size: contain;\n}\n</style>\n"],"mappings":";OAMWA,UAAyB;;EAL7BC,KAAK,EAAC;AAA4B;;EAGhCA,KAAK,EAAC;AAAe;mBAJ9B;;uBACEC,mBAAA,CAmBM,OAnBNC,UAmBM,G,0BAlBJC,mBAAA,CAA0D;IAAtDH,KAAK,EAAC;EAA4B,GAAC,gBAAc,sBAErDG,mBAAA,CAeM,OAfNC,UAeM,GAfsBC,mBAAA,sCAAyC,EACnEA,mBAAA,gCAAmC,E,0BACnCF,mBAAA,CAAoI;IAA/HG,GAAyB,EAAzBP,UAAyB;IAACQ,GAAG,EAAC,aAAa;IAACP,KAAK,EAAC;+BAEvDK,mBAAA,kCAAqC,E,gBACrCF,mBAAA,CASS;IAlBf,uBAAAK,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAUiBC,KAAA,CAAAC,aAAa,GAAAF,MAAA;IACrBG,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;IACtBb,KAAK,EAAC;gCAENG,mBAAA,CAAiD;IAAzCa,QAAQ,EAAR,EAAQ;IAACC,KAAK,EAAC;KAAG,gBAAc,uB,kBACxChB,mBAAA,CAESiB,SAAA,QAjBjBC,WAAA,CAegCT,KAAA,CAAAU,OAAO,EAAhBC,KAAK;yBAApBpB,mBAAA,CAES;MAFyBqB,GAAG,EAAED,KAAK,CAACE,UAAU;MAAGN,KAAK,EAAEI;wBAC5DA,KAAK,CAACE,UAAU,IAAG,IAAE,GAAAC,gBAAA,CAAGH,KAAK,CAACI,IAAI,IAAG,IAC1C,uBAjBRC,UAAA;2FAUiBhB,KAAA,CAAAC,aAAa,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}