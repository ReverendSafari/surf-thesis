{"ast":null,"code":"import axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport GradeDisplay from './GradeDisplay.vue';\nexport default {\n  props: {\n    beach: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      waveData: [],\n      closestWave: null,\n      waveGrade: '',\n      beachAngle: 0\n    };\n  },\n  components: {\n    GradeDisplay\n  },\n  computed: {\n    waveHeightRange() {\n      const height = this.closestWave ? this.closestWave.height : 0;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    },\n    waveDirectionCardinal() {\n      if (!this.closestWave) return '';\n      return this.convertDegreesToCardinal(this.closestWave.direction);\n    }\n  },\n  methods: {\n    async fetchWaves() {\n      if (this.beach && this.beach.beach_name) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach.beach_name}`);\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex]\n          };\n          const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach.beach_name);\n          if (beachData) {\n            this.beachAngle = beachData.beach_angle;\n          }\n          this.waveGrade = getWaveQuality(this.closestWave.direction, 10,\n          // Example wind speed, replace with actual data if available\n          this.closestWave.period, this.beachAngle, this.closestWave.height);\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      }\n    },\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n    convertDegreesToCardinal(degrees) {\n      const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n      const index = Math.round(degrees % 360 / 22.5);\n      return directions[index];\n    }\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","getWaveQuality","GradeDisplay","props","beach","type","Object","required","data","waveData","closestWave","waveGrade","beachAngle","components","computed","waveHeightRange","height","waveDirectionCardinal","convertDegreesToCardinal","direction","methods","fetchWaves","beach_name","response","get","JSON","parse","waves","closestTimeIndex","findClosestTimeIndex","hourly","time","wave_height","wave_direction","period","wave_period","beachResponse","beachData","beaches","find","b","beach_angle","error","console","times","currentTime","Date","timeDifferences","map","waveTime","Math","abs","indexOf","min","degrees","directions","index","round","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"w-full max-w-3xl mx-auto\">\n    <!-- Title centered at the top -->\n    <h3 class=\"text-center text-lg font-semibold mb-6\">Current Wave</h3>\n\n    <div class=\"flex justify-between space-x-24\">\n      <!-- Left Column: Wave Height and Period -->\n      <div class=\"flex flex-col w-1/2\">\n        <p class=\"text-gray-600\">Wave Height</p>\n        <p class=\"text-2xl font-bold whitespace-nowrap\">\n          {{ waveHeightRange }} ({{ closestWave ? closestWave.height : 'N/A' }} ft)\n        </p>\n\n        <p class=\"text-gray-600 mt-4\">Wave Period</p>\n        <p class=\"text-2xl font-bold whitespace-nowrap\">{{ closestWave ? closestWave.period : 'N/A' }} seconds</p>\n      </div>\n\n      <!-- Right Column: Wave Direction and Quality Grade -->\n      <div class=\"flex flex-col w-1/2\">\n        <p class=\"text-gray-600\">Wave Direction</p>\n        <div class=\"flex items-center space-x-2\">\n          <!-- Box containing the rotated arrow -->\n          <div class=\"w-10 h-10 flex items-center justify-center bg-gray-100 rounded-md\">\n            <span v-if=\"closestWave\" :style=\"{ transform: 'rotate(' + closestWave.direction + 'deg)' }\" class=\"text-xl font-bold\">↑</span>\n            <span v-else>N/A</span>\n          </div>\n\n          <!-- Display the direction in cardinal format and degrees -->\n          <span v-if=\"closestWave\" class=\"text-lg font-bold whitespace-nowrap\">\n            ({{ waveDirectionCardinal }} - {{ closestWave.direction }}°)\n          </span>\n        </div>\n\n        <div class=\"mt-6\">\n          <p class=\"text-gray-600 mt-4\">Surf Grade</p>\n          <GradeDisplay v-if=\"waveGrade\" :grade=\"waveGrade\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport GradeDisplay from './GradeDisplay.vue';\n\nexport default {\n  props: {\n    beach: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      waveData: [],\n      closestWave: null,\n      waveGrade: '',\n      beachAngle: 0,\n    };\n  },\n  components: {\n    GradeDisplay,\n  },\n  computed: {\n    waveHeightRange() {\n      const height = this.closestWave ? this.closestWave.height : 0;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    },\n    waveDirectionCardinal() {\n      if (!this.closestWave) return '';\n      return this.convertDegreesToCardinal(this.closestWave.direction);\n    },\n  },\n  methods: {\n    async fetchWaves() {\n      if (this.beach && this.beach.beach_name) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach.beach_name}`);\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex],\n          };\n\n          const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach.beach_name);\n\n          if (beachData) {\n            this.beachAngle = beachData.beach_angle;\n          }\n\n          this.waveGrade = getWaveQuality(\n            this.closestWave.direction,\n            10, // Example wind speed, replace with actual data if available\n            this.closestWave.period,\n            this.beachAngle,\n            this.closestWave.height\n          );\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      }\n    },\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n    convertDegreesToCardinal(degrees) {\n      const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n      const index = Math.round((degrees % 360) / 22.5);\n      return directions[index];\n    },\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}