{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"w-full max-w-3xl mx-auto\"\n};\nconst _hoisted_2 = {\n  class: \"flex flex-col w-full sm:w-1/2\"\n};\nconst _hoisted_3 = {\n  class: \"font-bold whitespace-nowrap\"\n};\nconst _hoisted_4 = {\n  class: \"flex flex-col w-full sm:w-1/2\"\n};\nconst _hoisted_5 = {\n  class: \"flex items-center space-x-2\"\n};\nconst _hoisted_6 = {\n  class: \"w-10 h-10 flex items-center justify-center bg-gray-100 rounded-md\"\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"text-lg font-bold whitespace-nowrap\"\n};\nconst _hoisted_9 = {\n  class: \"mt-6\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GradeDisplay = _resolveComponent(\"GradeDisplay\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Title centered at the top \"), _cache[4] || (_cache[4] = _createElementVNode(\"h3\", {\n    class: \"text-center text-lg font-semibold mb-6\"\n  }, \"Current Wave\", -1 /* HOISTED */)), _createCommentVNode(\" Content Container \"), _createElementVNode(\"div\", {\n    class: _normalizeClass(['flex flex-wrap justify-between space-y-6', $data.isSingleColumn ? 'flex-col space-y-6' : 'space-x-6'])\n  }, [_createCommentVNode(\" Left Column: Wave Height and Period \"), _createElementVNode(\"div\", _hoisted_2, [_cache[0] || (_cache[0] = _createElementVNode(\"p\", {\n    class: \"text-gray-600\"\n  }, \"Wave Height\", -1 /* HOISTED */)), _createElementVNode(\"p\", {\n    class: _normalizeClass([$options.waveTextColorClass, ' font-bold whitespace-nowrap'])\n  }, _toDisplayString($options.waveHeightRange) + \" (\" + _toDisplayString($data.closestWave ? $data.closestWave.height : 'N/A') + \" ft) \", 3 /* TEXT, CLASS */), _cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n    class: \"text-gray-600 mt-4\"\n  }, \"Wave Period\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_3, _toDisplayString($data.closestWave ? $data.closestWave.period : 'N/A') + \" seconds \", 1 /* TEXT */)]), _createCommentVNode(\" Right Column: Wave Direction and Quality Grade \"), _createElementVNode(\"div\", _hoisted_4, [_cache[3] || (_cache[3] = _createElementVNode(\"p\", {\n    class: \"text-gray-600 whitespace-nowrap\"\n  }, \"Wave Direction\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_5, [_createCommentVNode(\" Box containing the rotated arrow \"), _createElementVNode(\"div\", _hoisted_6, [$data.closestWave ? (_openBlock(), _createElementBlock(\"span\", {\n    key: 0,\n    style: _normalizeStyle({\n      transform: 'rotate(' + $data.closestWave.direction + 'deg)'\n    }),\n    class: \"text-xl font-bold\"\n  }, \"↑\", 4 /* STYLE */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"N/A\"))]), _createCommentVNode(\" Display the direction in cardinal format and degrees \"), $data.closestWave ? (_openBlock(), _createElementBlock(\"span\", _hoisted_8, \" (\" + _toDisplayString($options.waveDirectionCardinal) + \" - \" + _toDisplayString($data.closestWave.direction) + \"°) \", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_9, [_cache[2] || (_cache[2] = _createElementVNode(\"p\", {\n    class: \"text-gray-600\"\n  }, \"Surf Grade\", -1 /* HOISTED */)), $data.waveGrade ? (_openBlock(), _createBlock(_component_GradeDisplay, {\n    key: 0,\n    grade: $data.waveGrade\n  }, null, 8 /* PROPS */, [\"grade\"])) : _createCommentVNode(\"v-if\", true)])])], 2 /* CLASS */)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_normalizeClass","$data","isSingleColumn","_hoisted_2","$options","waveTextColorClass","waveHeightRange","_toDisplayString","closestWave","height","_hoisted_3","period","_hoisted_4","_hoisted_5","_hoisted_6","style","_normalizeStyle","transform","direction","_hoisted_7","_hoisted_8","waveDirectionCardinal","_hoisted_9","waveGrade","_createBlock","_component_GradeDisplay","grade"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"w-full max-w-3xl mx-auto\">\n    <!-- Title centered at the top -->\n    <h3 class=\"text-center text-lg font-semibold mb-6\">Current Wave</h3>\n\n    <!-- Content Container -->\n    <div\n      :class=\"[\n        'flex flex-wrap justify-between space-y-6',\n        isSingleColumn ? 'flex-col space-y-6' : 'space-x-6'\n      ]\"\n    >\n      <!-- Left Column: Wave Height and Period -->\n      <div class=\"flex flex-col w-full sm:w-1/2\">\n        <p class=\"text-gray-600\">Wave Height</p>\n        <p\n          :class=\"[waveTextColorClass, ' font-bold whitespace-nowrap']\"\n        >\n          {{ waveHeightRange }} ({{ closestWave ? closestWave.height : 'N/A' }} ft)\n        </p>\n\n        <p class=\"text-gray-600 mt-4\">Wave Period</p>\n        <p class=\"font-bold whitespace-nowrap\">\n          {{ closestWave ? closestWave.period : 'N/A' }} seconds\n        </p>\n      </div>\n\n      <!-- Right Column: Wave Direction and Quality Grade -->\n      <div class=\"flex flex-col w-full sm:w-1/2\">\n        <p class=\"text-gray-600 whitespace-nowrap\">Wave Direction</p>\n        <div class=\"flex items-center space-x-2\">\n          <!-- Box containing the rotated arrow -->\n          <div class=\"w-10 h-10 flex items-center justify-center bg-gray-100 rounded-md\">\n            <span v-if=\"closestWave\" :style=\"{ transform: 'rotate(' + closestWave.direction + 'deg)' }\" class=\"text-xl font-bold\">↑</span>\n            <span v-else>N/A</span>\n          </div>\n\n          <!-- Display the direction in cardinal format and degrees -->\n          <span v-if=\"closestWave\" class=\"text-lg font-bold whitespace-nowrap\">\n            ({{ waveDirectionCardinal }} - {{ closestWave.direction }}°)\n          </span>\n        </div>\n\n        <div class=\"mt-6\">\n          <p class=\"text-gray-600\">Surf Grade</p>\n          <GradeDisplay v-if=\"waveGrade\" :grade=\"waveGrade\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport GradeDisplay from './GradeDisplay.vue';\n\nexport default {\n  props: {\n    beach: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      waveData: [],\n      closestWave: null,\n      waveGrade: '', // This will store 'green', 'yellow', or 'red'\n      beachAngle: 0,\n      isSingleColumn: false, // New property for layout control\n    };\n  },\n  components: {\n    GradeDisplay,\n  },\n  computed: {\n    waveHeightRange() {\n      const height = this.closestWave ? this.closestWave.height : 0;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    },\n    waveDirectionCardinal() {\n      if (!this.closestWave) return '';\n      return this.convertDegreesToCardinal(this.closestWave.direction);\n    },\n    waveTextColorClass() {\n      // Map grade to text color\n      return this.waveGrade === 'green'\n        ? 'text-green-700'\n        : this.waveGrade === 'yellow'\n        ? 'text-yellow-700'\n        : 'text-red-700';\n    },\n  },\n  methods: {\n    async fetchWaves() {\n      if (this.beach && this.beach.beach_name) {\n        try {\n          const response = await axios.get(\n            `https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach.beach_name}`\n          );\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex],\n          };\n\n          const beachResponse = await axios.get(\n            'https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches'\n          );\n          const beachData = beachResponse.data.beaches.find(\n            (b) => b.beach_name === this.beach.beach_name\n          );\n\n          if (beachData) {\n            this.beachAngle = beachData.beach_angle;\n          }\n\n          this.waveGrade = getWaveQuality(\n            this.closestWave.direction,\n            10, // Example wind speed, replace with actual data if available\n            this.closestWave.period,\n            this.beachAngle,\n            this.closestWave.height\n          );\n\n          this.checkOverflow(); // Check overflow after data is loaded\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      }\n    },\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map((time) => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n    convertDegreesToCardinal(degrees) {\n      const directions = [\n        'N',\n        'NNE',\n        'NE',\n        'ENE',\n        'E',\n        'ESE',\n        'SE',\n        'SSE',\n        'S',\n        'SSW',\n        'SW',\n        'WSW',\n        'W',\n        'WNW',\n        'NW',\n        'NNW',\n        'N',\n      ];\n      const index = Math.round((degrees % 360) / 22.5);\n      return directions[index];\n    },\n    checkOverflow() {\n      const container = this.$el.querySelector('.flex');\n      const isOverflowing = container.scrollWidth > container.clientWidth;\n      this.isSingleColumn = isOverflowing;\n    },\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAA0B;;EAY5BA,KAAK,EAAC;AAA+B;;EASrCA,KAAK,EAAC;AAA6B;;EAMnCA,KAAK,EAAC;AAA+B;;EAEnCA,KAAK,EAAC;AAA6B;;EAEjCA,KAAK,EAAC;AAAmE;;EAhCxFC,GAAA;AAAA;;EAAAA,GAAA;EAsCmCD,KAAK,EAAC;;;EAK5BA,KAAK,EAAC;AAAM;;;uBA1CvBE,mBAAA,CAgDM,OAhDNC,UAgDM,GA/CJC,mBAAA,+BAAkC,E,0BAClCC,mBAAA,CAAoE;IAAhEL,KAAK,EAAC;EAAwC,GAAC,cAAY,sBAE/DI,mBAAA,uBAA0B,EAC1BC,mBAAA,CA0CM;IAzCHL,KAAK,EAPZM,eAAA,E,4CAO4EC,KAAA,CAAAC,cAAc,sC;MAKpFJ,mBAAA,yCAA4C,EAC5CC,mBAAA,CAYM,OAZNI,UAYM,G,0BAXJJ,mBAAA,CAAwC;IAArCL,KAAK,EAAC;EAAe,GAAC,aAAW,sBACpCK,mBAAA,CAII;IAHDL,KAAK,EAhBhBM,eAAA,EAgBmBI,QAAA,CAAAC,kBAAkB;sBAExBD,QAAA,CAAAE,eAAe,IAAG,IAAE,GAAAC,gBAAA,CAAGN,KAAA,CAAAO,WAAW,GAAGP,KAAA,CAAAO,WAAW,CAACC,MAAM,YAAW,OACvE,wB,0BAEAV,mBAAA,CAA6C;IAA1CL,KAAK,EAAC;EAAoB,GAAC,aAAW,sBACzCK,mBAAA,CAEI,KAFJW,UAEI,EAAAH,gBAAA,CADCN,KAAA,CAAAO,WAAW,GAAGP,KAAA,CAAAO,WAAW,CAACG,MAAM,YAAW,WAChD,gB,GAGFb,mBAAA,oDAAuD,EACvDC,mBAAA,CAmBM,OAnBNa,UAmBM,G,0BAlBJb,mBAAA,CAA6D;IAA1DL,KAAK,EAAC;EAAiC,GAAC,gBAAc,sBACzDK,mBAAA,CAWM,OAXNc,UAWM,GAVJf,mBAAA,sCAAyC,EACzCC,mBAAA,CAGM,OAHNe,UAGM,GAFQb,KAAA,CAAAO,WAAW,I,cAAvBZ,mBAAA,CAA8H;IAjC1ID,GAAA;IAiCsCoB,KAAK,EAjC3CC,eAAA;MAAAC,SAAA,cAiCsEhB,KAAA,CAAAO,WAAW,CAACU,SAAS;IAAA;IAAaxB,KAAK,EAAC;KAAoB,GAAC,qB,cACvHE,mBAAA,CAAuB,QAlCnCuB,UAAA,EAkCyB,KAAG,G,GAGlBrB,mBAAA,0DAA6D,EACjDG,KAAA,CAAAO,WAAW,I,cAAvBZ,mBAAA,CAEO,QAFPwB,UAEO,EAF8D,IAClE,GAAAb,gBAAA,CAAGH,QAAA,CAAAiB,qBAAqB,IAAG,KAAG,GAAAd,gBAAA,CAAGN,KAAA,CAAAO,WAAW,CAACU,SAAS,IAAG,KAC5D,mBAxCVpB,mBAAA,e,GA2CQC,mBAAA,CAGM,OAHNuB,UAGM,G,0BAFJvB,mBAAA,CAAuC;IAApCL,KAAK,EAAC;EAAe,GAAC,YAAU,sBACfO,KAAA,CAAAsB,SAAS,I,cAA7BC,YAAA,CAAoDC,uBAAA;IA7C9D9B,GAAA;IA6C0C+B,KAAK,EAAEzB,KAAA,CAAAsB;wCA7CjDzB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}