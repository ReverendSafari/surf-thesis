{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\",\n  style: {\n    \"height\": \"500px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ApexChart = _resolveComponent(\"ApexChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_ApexChart, {\n    type: \"line\",\n    options: $data.chartOptions,\n    series: $data.chartSeries,\n    height: \"400\"\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_ApexChart","type","options","$data","chartOptions","series","chartSeries","height"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/TideComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\" style=\"height:500px;\">\n    <ApexChart\n      type=\"line\"\n      :options=\"chartOptions\"\n      :series=\"chartSeries\"\n      height=\"400\"\n    />\n  </div>\n</template>\n\n<script>\nimport VueApexCharts from 'vue3-apexcharts';\nimport axios from 'axios';\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String, // Beach name passed from parent\n  },\n  data() {\n    return {\n      chartSeries: [],\n      chartOptions: {},\n      tideData: [],\n    };\n  },\n  mounted() {\n    this.fetchTideData();\n  },\n  methods: {\n    async fetchTideData() {\n      try {\n        const response = await axios.get(`https://your-api-url.com/tides/${this.beach}`);\n        const tideData = response.data.tides;\n        this.tideData = this.generateSmoothData(tideData);\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching tide data:', error);\n      }\n    },\n    generateSmoothData(tides) {\n      // Interpolate data for smooth tide transitions\n      const smoothData = [];\n      for (let i = 0; i < tides.length - 1; i++) {\n        const currentTide = tides[i];\n        const nextTide = tides[i + 1];\n        const currentTime = new Date(currentTide.time).getTime();\n        const nextTime = new Date(nextTide.time).getTime();\n        const currentHeight = parseFloat(currentTide.height);\n        const nextHeight = parseFloat(nextTide.height);\n\n        // Push the initial tide data point\n        smoothData.push({ x: currentTide.time, y: currentHeight });\n\n        // Interpolate points between current and next tide\n        const steps = 12; // Define the number of interpolated points\n        for (let j = 1; j < steps; j++) {\n          const timeStep = currentTime + ((nextTime - currentTime) / steps) * j;\n          const heightStep = currentHeight + ((nextHeight - currentHeight) / steps) * j;\n          smoothData.push({\n            x: new Date(timeStep).toISOString().slice(0, 16).replace('T', ' '),\n            y: heightStep.toFixed(2),\n          });\n        }\n      }\n\n      // Add the final tide point\n      smoothData.push({\n        x: tides[tides.length - 1].time,\n        y: parseFloat(tides[tides.length - 1].height),\n      });\n\n      return smoothData;\n    },\n    setupChart() {\n      this.chartSeries = [\n        {\n          name: 'Tide Height (ft)',\n          data: this.tideData,\n        },\n      ];\n      this.chartOptions = {\n        chart: {\n          type: 'line',\n          toolbar: {\n            show: false,\n          },\n        },\n        stroke: {\n          curve: 'smooth', // Smooth curve for wave-like effect\n          width: 2,\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            datetimeFormatter: {\n              hour: 'HH:mm',\n            },\n          },\n        },\n        yaxis: {\n          title: {\n            text: 'Tide Height (ft)',\n          },\n        },\n        tooltip: {\n          x: {\n            format: 'yyyy-MM-dd HH:mm',\n          },\n          y: {\n            formatter: (val) => `${val} ft`,\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC,KAAK;EAACC,KAAqB,EAArB;IAAA;EAAA;;;;uBAAjBC,mBAAA,CAOM,OAPNC,UAOM,GANJC,YAAA,CAKEC,oBAAA;IAJAC,IAAI,EAAC,MAAM;IACVC,OAAO,EAAEC,KAAA,CAAAC,YAAY;IACrBC,MAAM,EAAEF,KAAA,CAAAG,WAAW;IACpBC,MAAM,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}