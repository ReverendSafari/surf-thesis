{"ast":null,"code":"import axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport VueApexCharts from 'vue3-apexcharts';\nexport default {\n  components: {\n    ApexChart: VueApexCharts\n  },\n  props: {\n    beach: String,\n    beachAngle: Number\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: {},\n      hoveredWave: null\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    setupChart() {\n      const waveHeights = this.waveData.wave_height;\n      const timeStamps = this.waveData.time;\n      const colors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120;\n        const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n        return waveGrade === 'green' ? '#2ecc71' : waveGrade === 'yellow' ? '#f1c40f' : '#e74c3c';\n      });\n\n      // Create labels with daily grouping\n      const labels = timeStamps.map((time, index) => {\n        const date = new Date(time);\n        // Display full date label at the beginning of each new day (8-hour intervals as in your example)\n        return index % 8 === 0 ? date.toLocaleDateString('en-US', {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric'\n        }) : date.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      });\n      this.chartSeries = [{\n        name: 'Wave Height (ft)',\n        data: waveHeights\n      }];\n      this.chartOptions = {\n        chart: {\n          type: 'bar'\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            distributed: true\n          }\n        },\n        xaxis: {\n          categories: labels,\n          tickPlacement: 'on',\n          labels: {\n            rotate: -45,\n            // Rotate labels for better readability\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        colors: colors,\n        tooltip: {\n          custom: ({\n            series,\n            seriesIndex,\n            dataPointIndex\n          }) => {\n            const waveHeight = this.waveData.wave_height[dataPointIndex];\n            const wavePeriod = this.waveData.wave_period[dataPointIndex];\n            const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n            const windDirection = this.windData.wind_direction_10m[dataPointIndex];\n            return `<div style=\"padding:8px;\">\n                <strong>Height:</strong> ${waveHeight} ft<br>\n                <strong>Period:</strong> ${wavePeriod} s<br>\n                <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n                <strong>Wind Direction:</strong> ${windDirection}°\n              </div>`;\n          }\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","getWaveQuality","VueApexCharts","components","ApexChart","props","beach","String","beachAngle","Number","data","waveData","windData","chartSeries","chartOptions","hoveredWave","mounted","fetchData","methods","waveResponse","get","windResponse","JSON","parse","waves","wind","hourly","setupChart","error","console","waveHeights","wave_height","timeStamps","time","colors","map","height","index","windSpeed","wind_speed_10m","windDirection","wind_direction_10m","wavePeriod","wave_period","waveGrade","labels","date","Date","toLocaleDateString","weekday","month","day","toLocaleTimeString","hour","minute","name","chart","type","plotOptions","bar","borderRadius","distributed","xaxis","categories","tickPlacement","rotate","style","fontSize","tooltip","custom","series","seriesIndex","dataPointIndex","waveHeight"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\" style=\"height:500px\">\n    <ApexChart\n      type=\"bar\"\n      :options=\"chartOptions\"\n      :series=\"chartSeries\"\n      height=\"400\"\n    />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport VueApexCharts from 'vue3-apexcharts';\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String,\n    beachAngle: Number,\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: {},\n      hoveredWave: null,\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n          setupChart() {\n        const waveHeights = this.waveData.wave_height;\n        const timeStamps = this.waveData.time;\n        const colors = waveHeights.map((height, index) => {\n          const windSpeed = this.windData.wind_speed_10m[index];\n          const windDirection = this.windData.wind_direction_10m[index];\n          const wavePeriod = this.waveData.wave_period[index];\n          const beachAngle = this.beachAngle || 120;\n\n          const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n          return waveGrade === 'green' ? '#2ecc71' : waveGrade === 'yellow' ? '#f1c40f' : '#e74c3c';\n        });\n\n        // Create labels with daily grouping\n        const labels = timeStamps.map((time, index) => {\n          const date = new Date(time);\n          // Display full date label at the beginning of each new day (8-hour intervals as in your example)\n          return index % 8 === 0 \n            ? date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' }) \n            : date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n        });\n\n        this.chartSeries = [\n          {\n            name: 'Wave Height (ft)',\n            data: waveHeights,\n          },\n        ];\n\n        this.chartOptions = {\n          chart: {\n            type: 'bar',\n          },\n          plotOptions: {\n            bar: {\n              borderRadius: 4,\n              distributed: true,\n            },\n          },\n          xaxis: {\n            categories: labels,\n            tickPlacement: 'on',\n            labels: {\n              rotate: -45, // Rotate labels for better readability\n              style: {\n                fontSize: '12px',\n              },\n            },\n          },\n          colors: colors,\n          tooltip: {\n            custom: ({ series, seriesIndex, dataPointIndex }) => {\n              const waveHeight = this.waveData.wave_height[dataPointIndex];\n              const wavePeriod = this.waveData.wave_period[dataPointIndex];\n              const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n              const windDirection = this.windData.wind_direction_10m[dataPointIndex];\n              return `<div style=\"padding:8px;\">\n                <strong>Height:</strong> ${waveHeight} ft<br>\n                <strong>Period:</strong> ${wavePeriod} s<br>\n                <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n                <strong>Wind Direction:</strong> ${windDirection}°\n              </div>`;\n            }\n          },\n        };\n      }\n  },\n};\n</script>\n\n<style scoped>\n.hover-details {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n</style>\n"],"mappings":"AAYA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,cAAa,QAAS,yBAAyB;AACxD,OAAOC,aAAY,MAAO,iBAAiB;AAE3C,eAAe;EACbC,UAAU,EAAE;IACVC,SAAS,EAAEF;EACb,CAAC;EACDG,KAAK,EAAE;IACLC,KAAK,EAAEC,MAAM;IACbC,UAAU,EAAEC;EACd,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,CAAC,CAAC;MAChBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAME,YAAW,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,0EAA0E,IAAI,CAACd,KAAK,EAAE,CAAC;QAC5H,MAAMe,YAAW,GAAI,MAAMrB,KAAK,CAACoB,GAAG,CAAC,yEAAyE,IAAI,CAACd,KAAK,EAAE,CAAC;QAE3H,MAAMK,QAAO,GAAIW,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACT,IAAI,CAACc,KAAK,CAAC;QACpD,MAAMZ,QAAO,GAAIU,IAAI,CAACC,KAAK,CAACF,YAAY,CAACX,IAAI,CAACe,IAAI,CAAC;QAEnD,IAAI,CAACd,QAAO,GAAIA,QAAQ,CAACe,MAAM;QAC/B,IAAI,CAACd,QAAO,GAAIA,QAAQ,CAACc,MAAM;QAE/B,IAAI,CAACC,UAAU,CAAC,CAAC;MACnB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACKD,UAAUA,CAAA,EAAG;MACf,MAAMG,WAAU,GAAI,IAAI,CAACnB,QAAQ,CAACoB,WAAW;MAC7C,MAAMC,UAAS,GAAI,IAAI,CAACrB,QAAQ,CAACsB,IAAI;MACrC,MAAMC,MAAK,GAAIJ,WAAW,CAACK,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;QAChD,MAAMC,SAAQ,GAAI,IAAI,CAAC1B,QAAQ,CAAC2B,cAAc,CAACF,KAAK,CAAC;QACrD,MAAMG,aAAY,GAAI,IAAI,CAAC5B,QAAQ,CAAC6B,kBAAkB,CAACJ,KAAK,CAAC;QAC7D,MAAMK,UAAS,GAAI,IAAI,CAAC/B,QAAQ,CAACgC,WAAW,CAACN,KAAK,CAAC;QACnD,MAAM7B,UAAS,GAAI,IAAI,CAACA,UAAS,IAAK,GAAG;QAEzC,MAAMoC,SAAQ,GAAI3C,cAAc,CAACuC,aAAa,EAAEF,SAAS,EAAEI,UAAU,EAAElC,UAAU,EAAE4B,MAAM,CAAC;QAE1F,OAAOQ,SAAQ,KAAM,OAAM,GAAI,SAAQ,GAAIA,SAAQ,KAAM,QAAO,GAAI,SAAQ,GAAI,SAAS;MAC3F,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAK,GAAIb,UAAU,CAACG,GAAG,CAAC,CAACF,IAAI,EAAEI,KAAK,KAAK;QAC7C,MAAMS,IAAG,GAAI,IAAIC,IAAI,CAACd,IAAI,CAAC;QAC3B;QACA,OAAOI,KAAI,GAAI,MAAM,IACjBS,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEC,KAAK,EAAE,OAAO;UAAEC,GAAG,EAAE;QAAU,CAAC,IACrFL,IAAI,CAACM,kBAAkB,CAAC,OAAO,EAAE;UAAEC,IAAI,EAAE,SAAS;UAAEC,MAAM,EAAE;QAAU,CAAC,CAAC;MAC9E,CAAC,CAAC;MAEF,IAAI,CAACzC,WAAU,GAAI,CACjB;QACE0C,IAAI,EAAE,kBAAkB;QACxB7C,IAAI,EAAEoB;MACR,CAAC,CACF;MAED,IAAI,CAAChB,YAAW,GAAI;QAClB0C,KAAK,EAAE;UACLC,IAAI,EAAE;QACR,CAAC;QACDC,WAAW,EAAE;UACXC,GAAG,EAAE;YACHC,YAAY,EAAE,CAAC;YACfC,WAAW,EAAE;UACf;QACF,CAAC;QACDC,KAAK,EAAE;UACLC,UAAU,EAAElB,MAAM;UAClBmB,aAAa,EAAE,IAAI;UACnBnB,MAAM,EAAE;YACNoB,MAAM,EAAE,CAAC,EAAE;YAAE;YACbC,KAAK,EAAE;cACLC,QAAQ,EAAE;YACZ;UACF;QACF,CAAC;QACDjC,MAAM,EAAEA,MAAM;QACdkC,OAAO,EAAE;UACPC,MAAM,EAAEA,CAAC;YAAEC,MAAM;YAAEC,WAAW;YAAEC;UAAe,CAAC,KAAK;YACnD,MAAMC,UAAS,GAAI,IAAI,CAAC9D,QAAQ,CAACoB,WAAW,CAACyC,cAAc,CAAC;YAC5D,MAAM9B,UAAS,GAAI,IAAI,CAAC/B,QAAQ,CAACgC,WAAW,CAAC6B,cAAc,CAAC;YAC5D,MAAMlC,SAAQ,GAAI,IAAI,CAAC1B,QAAQ,CAAC2B,cAAc,CAACiC,cAAc,CAAC;YAC9D,MAAMhC,aAAY,GAAI,IAAI,CAAC5B,QAAQ,CAAC6B,kBAAkB,CAAC+B,cAAc,CAAC;YACtE,OAAO;2CACsBC,UAAU;2CACV/B,UAAU;+CACNJ,SAAS;mDACLE,aAAa;qBAC3C;UACT;QACF;MACF,CAAC;IACH;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}