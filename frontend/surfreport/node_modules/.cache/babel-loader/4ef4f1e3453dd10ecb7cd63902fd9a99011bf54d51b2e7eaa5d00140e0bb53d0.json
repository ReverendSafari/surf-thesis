{"ast":null,"code":"import { Chart } from 'chart.js';\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js'; // Import the grading function\n\nexport default {\n  props: {\n    beach: String,\n    // Beach name passed from the parent component\n    beachAngle: Number //Beach angle passed from the parent component\n  },\n  data() {\n    return {\n      waveData: [],\n      // Array to store wave data\n      windData: [],\n      // Array to store wind data\n      hoveredWave: null // Stores data for the hovered wave\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    // Fetch wave and wind data from the API\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n\n        // Parse the response data\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        // Store the wave and wind data in the component's data\n        this.waveData = waveData.hourly;\n        this.windData = windData.hourly;\n\n        // Build the chart\n        this.buildChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // Build the bar chart using Chart.js\n    buildChart() {\n      const ctx = this.$refs.waveChart.getContext('2d');\n\n      // Prepare the datasets for the chart\n      const waveHeights = this.waveData.wave_height;\n      const labels = this.waveData.time.map(time => new Date(time).toLocaleDateString());\n\n      // Apply the grading logic using getWaveQuality\n      const barColors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120; // Use actual beach angle data if available\n\n        // Get the wave quality using the utility function\n        const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, this.beachAngle, height);\n\n        // Map the grade to a color\n        return waveGrade === 'green' ? 'green' : waveGrade === 'yellow' ? 'yellow' : 'red'; // Default to red for poor waves\n      });\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Wave Height (ft)',\n            data: waveHeights,\n            backgroundColor: barColors // Use calculated colors based on grading\n          }]\n        },\n        options: {\n          responsive: true,\n          tooltips: {\n            callbacks: {\n              label: (tooltipItem, data) => {\n                const index = tooltipItem.index;\n                const waveHeight = this.waveData.wave_height[index];\n                const wavePeriod = this.waveData.wave_period[index];\n                const windSpeed = this.windData.wind_speed_10m[index];\n                const windDirection = this.windData.wind_direction_10m[index];\n\n                // Display the detailed wave info in the tooltip\n                this.hoveredWave = {\n                  height: waveHeight,\n                  period: wavePeriod,\n                  wind_speed: windSpeed,\n                  wind_direction: windDirection\n                };\n                return `Height: ${waveHeight} ft, Period: ${wavePeriod} s, Wind: ${windSpeed} kn, Dir: ${windDirection}°`;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","axios","getWaveQuality","props","beach","String","beachAngle","Number","data","waveData","windData","hoveredWave","mounted","fetchData","methods","waveResponse","get","windResponse","JSON","parse","waves","wind","hourly","buildChart","error","console","ctx","$refs","waveChart","getContext","waveHeights","wave_height","labels","time","map","Date","toLocaleDateString","barColors","height","index","windSpeed","wind_speed_10m","windDirection","wind_direction_10m","wavePeriod","wave_period","waveGrade","type","datasets","label","backgroundColor","options","responsive","tooltips","callbacks","tooltipItem","waveHeight","period","wind_speed","wind_direction"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6\">\n  \n      <!-- Bar Chart for Weekly Waves -->\n      <canvas ref=\"waveChart\"></canvas>\n  \n      <!-- Detailed Wave Summary on Hover (Optional) -->\n      <div v-if=\"hoveredWave\" class=\"hover-details\">\n        <p><strong>Wave Height:</strong> {{ hoveredWave.height }} ft</p>\n        <p><strong>Wave Period:</strong> {{ hoveredWave.period }} seconds</p>\n        <p><strong>Wind Speed:</strong> {{ hoveredWave.wind_speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ hoveredWave.wind_direction }}°</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Chart } from 'chart.js';\n  import axios from 'axios';\n  import { getWaveQuality } from '../utils/waveGrading.js'; // Import the grading function\n  \n  export default {\n    props: {\n      beach: String, // Beach name passed from the parent component\n      beachAngle: Number //Beach angle passed from the parent component\n    },\n    data() {\n      return {\n        waveData: [],  // Array to store wave data\n        windData: [],  // Array to store wind data\n        hoveredWave: null,  // Stores data for the hovered wave\n      };\n    },\n    mounted() {\n      this.fetchData();\n    },\n    methods: {\n  // Fetch wave and wind data from the API\n  async fetchData() {\n    try {\n      const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n      const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n      \n      // Parse the response data\n      const waveData = JSON.parse(waveResponse.data.waves);\n      const windData = JSON.parse(windResponse.data.wind);\n\n      // Store the wave and wind data in the component's data\n      this.waveData = waveData.hourly;\n      this.windData = windData.hourly;\n\n      // Build the chart\n      this.buildChart();\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  },\n  // Build the bar chart using Chart.js\n  buildChart() {\n    const ctx = this.$refs.waveChart.getContext('2d');\n\n    // Prepare the datasets for the chart\n    const waveHeights = this.waveData.wave_height;\n    const labels = this.waveData.time.map(time => new Date(time).toLocaleDateString());\n\n    // Apply the grading logic using getWaveQuality\n    const barColors = waveHeights.map((height, index) => {\n      const windSpeed = this.windData.wind_speed_10m[index];\n      const windDirection = this.windData.wind_direction_10m[index];\n      const wavePeriod = this.waveData.wave_period[index];\n      const beachAngle = this.beachAngle || 120;  // Use actual beach angle data if available\n\n      // Get the wave quality using the utility function\n      const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, this.beachAngle, height);\n\n      // Map the grade to a color\n      return waveGrade === 'green' ? 'green' :\n             waveGrade === 'yellow' ? 'yellow' :\n             'red';  // Default to red for poor waves\n    });\n\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Wave Height (ft)',\n          data: waveHeights,\n          backgroundColor: barColors,  // Use calculated colors based on grading\n        }]\n      },\n      options: {\n        responsive: true,\n        tooltips: {\n          callbacks: {\n            label: (tooltipItem, data) => {\n              const index = tooltipItem.index;\n              const waveHeight = this.waveData.wave_height[index];\n              const wavePeriod = this.waveData.wave_period[index];\n              const windSpeed = this.windData.wind_speed_10m[index];\n              const windDirection = this.windData.wind_direction_10m[index];\n\n              // Display the detailed wave info in the tooltip\n              this.hoveredWave = {\n                height: waveHeight,\n                period: wavePeriod,\n                wind_speed: windSpeed,\n                wind_direction: windDirection,\n              };\n\n              return `Height: ${waveHeight} ft, Period: ${wavePeriod} s, Wind: ${windSpeed} kn, Dir: ${windDirection}°`;\n            }\n          }\n        }\n      }\n    });\n  }\n}\n\n  };\n  </script>\n  \n  <style scoped>\n  .hover-details {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    background-color: #f9f9f9;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}