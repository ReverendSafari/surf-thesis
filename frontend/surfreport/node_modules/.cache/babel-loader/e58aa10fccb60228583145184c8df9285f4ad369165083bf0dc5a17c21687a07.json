{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\",\n  style: {\n    \"height\": \"500px\"\n  }\n};\nconst _hoisted_2 = {\n  ref: \"windChart\",\n  style: {\n    \"height\": \"100px\",\n    \"width\": \"700px\"\n  }\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"hover-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */), $data.hoveredWind ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"strong\", null, \"Wind Strength:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWind.speed) + \" kn\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Wind Direction:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWind.direction) + \"° (\" + _toDisplayString($data.hoveredWind.cardinal) + \")\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","style","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$data","hoveredWind","_hoisted_3","_createTextVNode","_toDisplayString","speed","direction","cardinal","_createCommentVNode"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWindComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6\" style=\"height:500px\">\n      <canvas ref=\"windChart\" style=\"height: 100px; width: 700px;\"></canvas>\n      <div v-if=\"hoveredWind\" class=\"hover-details\">\n        <p><strong>Wind Strength:</strong> {{ hoveredWind.speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ hoveredWind.direction }}° ({{ hoveredWind.cardinal }})</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Chart, BarController, CategoryScale, LinearScale, BarElement, Tooltip, Legend } from 'chart.js';\n  import axios from 'axios';\n  \n  export default {\n    props: {\n      beach: String,\n    },\n    data() {\n      return {\n        windData: [],\n        hoveredWind: null,\n      };\n    },\n    mounted() {\n      this.fetchWindData();\n    },\n    methods: {\n      async fetchWindData() {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n          const windData = JSON.parse(response.data.wind).hourly;\n          this.windData = windData;\n          this.buildChart();\n        } catch (error) {\n          console.error('Error fetching wind data:', error);\n          this.windData = { wind_speed_10m: [], wind_direction_10m: [] };\n        }\n      },\n      buildChart() {\n        const ctx = this.$refs.windChart.getContext('2d');\n        Chart.register(BarController, CategoryScale, LinearScale, BarElement, Tooltip, Legend);\n  \n        const windSpeeds = this.windData.wind_speed_10m;\n        const windDirections = this.windData.wind_direction_10m;\n        const labels = this.windData.time.map(time => {\n          const date = new Date(time);\n          return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n        });\n  \n        const directionArrows = windDirections.map(dir => this.getArrowDirection(dir));\n  \n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Wind Speed (kn)',\n              data: windSpeeds,\n              backgroundColor: 'lightblue',\n            }],\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  label: (tooltipItem) => {\n                    const index = tooltipItem.dataIndex;\n                    const windSpeed = windSpeeds[index];\n                    const windDirection = windDirections[index];\n                    const cardinalDirection = this.getCardinalDirection(windDirection);\n                    \n                    this.hoveredWind = {\n                      speed: windSpeed,\n                      direction: windDirection,\n                      cardinal: cardinalDirection,\n                    };\n                    return `Speed: ${windSpeed} kn, Direction: ${windDirection}° (${cardinalDirection})`;\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                ticks: {\n                  callback: (value, index) => labels[index],\n                }\n              }\n            }\n          },\n          plugins: [{\n            id: 'directionArrows',\n            afterDraw: (chart) => {\n              const ctx = chart.ctx;\n              const xAxis = chart.scales['x'];\n              directionArrows.forEach((arrow, i) => {\n                ctx.fillText(arrow, xAxis.getPixelForTick(i), chart.chartArea.bottom + 10);\n                ctx.fillText(windSpeeds[i] + ' kn', xAxis.getPixelForTick(i), chart.chartArea.bottom + 25);\n              });\n            }\n          }]\n        });\n      },\n      getArrowDirection(degree) {\n        // Logic to convert degrees to arrow symbol\n        if (degree >= 0 && degree < 45) return '↑';\n        if (degree >= 45 && degree < 135) return '→';\n        if (degree >= 135 && degree < 225) return '↓';\n        if (degree >= 225 && degree < 315) return '←';\n        return '↑';\n      },\n      getCardinalDirection(degree) {\n        // Return cardinal direction based on degrees\n        if (degree >= 0 && degree < 45) return 'N';\n        if (degree >= 45 && degree < 90) return 'NE';\n        if (degree >= 90 && degree < 135) return 'E';\n        if (degree >= 135 && degree < 180) return 'SE';\n        if (degree >= 180 && degree < 225) return 'S';\n        if (degree >= 225 && degree < 270) return 'SW';\n        if (degree >= 270 && degree < 315) return 'W';\n        return 'NW';\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .hover-details {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    background-color: #f9f9f9;\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC,KAAK;EAACC,KAAoB,EAApB;IAAA;EAAA;;;EACPC,GAAG,EAAC,WAAW;EAACD,KAAoC,EAApC;IAAA;IAAA;EAAA;;;EAF9BE,GAAA;EAG8BH,KAAK,EAAC;;;uBAFhCI,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,CAAsE,UAAtEC,UAAsE,+BAC3DC,KAAA,CAAAC,WAAW,I,cAAtBL,mBAAA,CAGM,OAHNM,UAGM,GAFJJ,mBAAA,CAAiE,Y,0BAA9DA,mBAAA,CAA+B,gBAAvB,gBAAc,sBAJjCK,gBAAA,CAI0C,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACI,KAAK,IAAG,KAAG,gB,GAC7DP,mBAAA,CAAiG,Y,0BAA9FA,mBAAA,CAAgC,gBAAxB,iBAAe,sBALlCK,gBAAA,CAK2C,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACK,SAAS,IAAG,KAAG,GAAAF,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACM,QAAQ,IAAG,GAAC,gB,OALrGC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}