{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"grid grid-cols-2 gap-4\"\n};\nconst _hoisted_2 = {\n  class: \"text-2xl font-bold\"\n};\nconst _hoisted_3 = {\n  class: \"text-lg font-medium\"\n};\nconst _hoisted_4 = {\n  class: \"flex items-center\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  key: 2,\n  class: \"text-lg font-bold ml-2\"\n};\nconst _hoisted_7 = {\n  class: \"mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GradeDisplay = _resolveComponent(\"GradeDisplay\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Left Column: Wave Height and Period \"), _createElementVNode(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", {\n    class: \"text-sm font-semibold mb-1\"\n  }, \"Current Wave\", -1 /* HOISTED */)), _createCommentVNode(\" Wave Height with Range \"), _cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n    class: \"text-gray-600\"\n  }, \"Wave Height\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_2, _toDisplayString($options.waveHeightRange) + \" (\" + _toDisplayString($data.closestWave ? $data.closestWave.height : 'N/A') + \" ft) \", 1 /* TEXT */), _createCommentVNode(\" Wave Period \"), _cache[2] || (_cache[2] = _createElementVNode(\"p\", {\n    class: \"text-gray-600 mt-2\"\n  }, \"Wave Period\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_3, _toDisplayString($data.closestWave ? $data.closestWave.period : 'N/A') + \" seconds\", 1 /* TEXT */)]), _createCommentVNode(\" Right Column: Wave Direction and Quality Grade \"), _createElementVNode(\"div\", null, [_createCommentVNode(\" Wave Direction with Cardinal Display \"), _cache[3] || (_cache[3] = _createElementVNode(\"p\", {\n    class: \"text-gray-600\"\n  }, \"Wave Direction\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [$data.closestWave ? (_openBlock(), _createElementBlock(\"span\", {\n    key: 0,\n    style: _normalizeStyle({\n      transform: 'rotate(' + $data.closestWave.direction + 'deg)'\n    }),\n    class: \"inline-block\"\n  }, \"→\", 4 /* STYLE */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"N/A\")), $data.closestWave ? (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"(\" + _toDisplayString($options.waveDirectionCardinal) + \" - \" + _toDisplayString($data.closestWave.direction) + \"°)\", 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Wave Quality Grade \"), _createElementVNode(\"div\", _hoisted_7, [$data.waveGrade ? (_openBlock(), _createBlock(_component_GradeDisplay, {\n    key: 0,\n    grade: $data.waveGrade\n  }, null, 8 /* PROPS */, [\"grade\"])) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_toDisplayString","$options","waveHeightRange","$data","closestWave","height","_hoisted_3","period","_hoisted_4","style","_normalizeStyle","transform","direction","_hoisted_5","_hoisted_6","waveDirectionCardinal","_hoisted_7","waveGrade","_createBlock","_component_GradeDisplay","grade"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"grid grid-cols-2 gap-4\">\n    <!-- Left Column: Wave Height and Period -->\n    <div>\n      <h3 class=\"text-sm font-semibold mb-1\">Current Wave</h3>\n\n      <!-- Wave Height with Range -->\n      <p class=\"text-gray-600\">Wave Height</p>\n      <p class=\"text-2xl font-bold\">\n        {{ waveHeightRange }} ({{ closestWave ? closestWave.height : 'N/A' }} ft)\n      </p>\n\n      <!-- Wave Period -->\n      <p class=\"text-gray-600 mt-2\">Wave Period</p>\n      <p class=\"text-lg font-medium\">{{ closestWave ? closestWave.period : 'N/A' }} seconds</p>\n    </div>\n\n    <!-- Right Column: Wave Direction and Quality Grade -->\n    <div>\n      <!-- Wave Direction with Cardinal Display -->\n      <p class=\"text-gray-600\">Wave Direction</p>\n      <div class=\"flex items-center\">\n        <span v-if=\"closestWave\" :style=\"{ transform: 'rotate(' + closestWave.direction + 'deg)' }\" class=\"inline-block\">→</span>\n        <span v-else>N/A</span>\n        <span v-if=\"closestWave\" class=\"text-lg font-bold ml-2\">({{ waveDirectionCardinal }} - {{ closestWave.direction }}°)</span>\n      </div>\n\n      <!-- Wave Quality Grade -->\n      <div class=\"mt-4\">\n        <GradeDisplay v-if=\"waveGrade\" :grade=\"waveGrade\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js';\nimport GradeDisplay from './GradeDisplay.vue';\n\nexport default {\n  props: {\n    beach: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      waveData: [], // Stores the fetched wave data\n      closestWave: null, // Stores the closest wave data to the current time\n      waveGrade: '', // Stores the wave quality grade\n      beachAngle: 0, // Stores the beach angle from the API\n    };\n  },\n  components: {\n    GradeDisplay,\n  },\n  computed: {\n    // Compute the wave height range\n    waveHeightRange() {\n      const height = this.closestWave ? this.closestWave.height : 0;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    },\n    // Convert wave direction to cardinal direction\n    waveDirectionCardinal() {\n      if (!this.closestWave) return '';\n      return this.convertDegreesToCardinal(this.closestWave.direction);\n    },\n  },\n  methods: {\n    // Fetch wave data from the API\n    async fetchWaves() {\n      if (this.beach && this.beach.beach_name) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach.beach_name}`);\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex],\n          };\n\n          const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach.beach_name);\n\n          if (beachData) {\n            this.beachAngle = beachData.beach_angle;\n          }\n\n          this.waveGrade = getWaveQuality(\n            this.closestWave.direction,\n            10, // Example wind speed, replace with actual data if available\n            this.closestWave.period,\n            this.beachAngle,\n            this.closestWave.height\n          );\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      }\n    },\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n    convertDegreesToCardinal(degrees) {\n      const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n      const index = Math.round((degrees % 360) / 22.5);\n      return directions[index];\n    },\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAwB;;EAO5BA,KAAK,EAAC;AAAoB;;EAM1BA,KAAK,EAAC;AAAqB;;EAOzBA,KAAK,EAAC;AAAmB;;EArBpCC,GAAA;AAAA;;EAAAA,GAAA;EAwBiCD,KAAK,EAAC;;;EAI5BA,KAAK,EAAC;AAAM;;;uBA3BrBE,mBAAA,CA+BM,OA/BNC,UA+BM,GA9BJC,mBAAA,yCAA4C,EAC5CC,mBAAA,CAYM,c,0BAXJA,mBAAA,CAAwD;IAApDL,KAAK,EAAC;EAA4B,GAAC,cAAY,sBAEnDI,mBAAA,4BAA+B,E,0BAC/BC,mBAAA,CAAwC;IAArCL,KAAK,EAAC;EAAe,GAAC,aAAW,sBACpCK,mBAAA,CAEI,KAFJC,UAEI,EAAAC,gBAAA,CADCC,QAAA,CAAAC,eAAe,IAAG,IAAE,GAAAF,gBAAA,CAAGG,KAAA,CAAAC,WAAW,GAAGD,KAAA,CAAAC,WAAW,CAACC,MAAM,YAAW,OACvE,iBAEAR,mBAAA,iBAAoB,E,0BACpBC,mBAAA,CAA6C;IAA1CL,KAAK,EAAC;EAAoB,GAAC,aAAW,sBACzCK,mBAAA,CAAyF,KAAzFQ,UAAyF,EAAAN,gBAAA,CAAvDG,KAAA,CAAAC,WAAW,GAAGD,KAAA,CAAAC,WAAW,CAACG,MAAM,YAAW,UAAQ,gB,GAGvFV,mBAAA,oDAAuD,EACvDC,mBAAA,CAaM,cAZJD,mBAAA,0CAA6C,E,0BAC7CC,mBAAA,CAA2C;IAAxCL,KAAK,EAAC;EAAe,GAAC,gBAAc,sBACvCK,mBAAA,CAIM,OAJNU,UAIM,GAHQL,KAAA,CAAAC,WAAW,I,cAAvBT,mBAAA,CAAyH;IAtBjID,GAAA;IAsBkCe,KAAK,EAtBvCC,eAAA;MAAAC,SAAA,cAsBkER,KAAA,CAAAC,WAAW,CAACQ,SAAS;IAAA;IAAanB,KAAK,EAAC;KAAe,GAAC,qB,cAClHE,mBAAA,CAAuB,QAvB/BkB,UAAA,EAuBqB,KAAG,IACJV,KAAA,CAAAC,WAAW,I,cAAvBT,mBAAA,CAA2H,QAA3HmB,UAA2H,EAAnE,GAAC,GAAAd,gBAAA,CAAGC,QAAA,CAAAc,qBAAqB,IAAG,KAAG,GAAAf,gBAAA,CAAGG,KAAA,CAAAC,WAAW,CAACQ,SAAS,IAAG,IAAE,mBAxB5Hf,mBAAA,e,GA2BMA,mBAAA,wBAA2B,EAC3BC,mBAAA,CAEM,OAFNkB,UAEM,GADgBb,KAAA,CAAAc,SAAS,I,cAA7BC,YAAA,CAAoDC,uBAAA;IA7B5DzB,GAAA;IA6BwC0B,KAAK,EAAEjB,KAAA,CAAAc;wCA7B/CpB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}