{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"h-full overflow-x-auto\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ApexChart = _resolveComponent(\"ApexChart\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"p-4 border rounded-lg bg-white shadow-md mx-auto\",\n    style: _normalizeStyle({\n      height: $data.chartHeight\n    })\n  }, [_createCommentVNode(\" Optional Card Header \"), _cache[1] || (_cache[1] = _createElementVNode(\"h3\", {\n    class: \"text-lg font-semibold mb-2 text-center\"\n  }, \"Weekly Wave Forecast\", -1 /* HOISTED */)), _createCommentVNode(\" Chart Container \"), $data.chartOptions && $data.chartSeries.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    style: _normalizeStyle({\n      minWidth: $data.chartMinWidth\n    })\n  }, [_createVNode(_component_ApexChart, {\n    type: \"bar\",\n    options: $data.chartOptions,\n    series: $data.chartSeries,\n    height: $options.chartHeightNumeric\n  }, null, 8 /* PROPS */, [\"options\", \"series\", \"height\"])], 4 /* STYLE */)])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" Loading Message \"), _cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"text-center mt-4\"\n  }, [_createElementVNode(\"p\", null, \"Loading chart...\")], -1 /* HOISTED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))], 4 /* STYLE */);\n}","map":{"version":3,"names":["key","class","_createElementBlock","style","_normalizeStyle","height","$data","chartHeight","_createCommentVNode","_createElementVNode","chartOptions","chartSeries","length","_hoisted_1","minWidth","chartMinWidth","_createVNode","_component_ApexChart","type","options","series","$options","chartHeightNumeric","_Fragment"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div\n    class=\"p-4 border rounded-lg bg-white shadow-md mx-auto\"\n    :style=\"{ height: chartHeight }\"\n  >\n    <!-- Optional Card Header -->\n    <h3 class=\"text-lg font-semibold mb-2 text-center\">Weekly Wave Forecast</h3>\n\n    <!-- Chart Container -->\n    <div class=\"h-full overflow-x-auto\" v-if=\"chartOptions && chartSeries.length > 0\">\n      <div :style=\"{ minWidth: chartMinWidth }\">\n        <ApexChart\n          type=\"bar\"\n          :options=\"chartOptions\"\n          :series=\"chartSeries\"\n          :height=\"chartHeightNumeric\"\n        />\n      </div>\n    </div>\n\n    <!-- Loading Message -->\n    <div v-else class=\"text-center mt-4\">\n      <p>Loading chart...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { getWaveQuality } from \"../utils/waveGrading.js\";\nimport VueApexCharts from \"vue3-apexcharts\";\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String,\n    beachAngle: Number,\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: null, // Ensure it starts as null to avoid rendering prematurely\n      chartHeight: \"520px\", // Dynamic height for responsive adjustments\n      chartMinWidth: \"100%\", // Dynamic width for responsiveness\n    };\n  },\n  computed: {\n    chartHeightNumeric() {\n      return parseInt(this.chartHeight, 10); // Convert height to a numeric value for ApexChart\n    },\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(\n          `https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`\n        );\n        const windResponse = await axios.get(\n          `https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`\n        );\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        this.waveData = waveData.hourly || [];\n        this.windData = windData.hourly || [];\n\n        // Ensure data is valid before setting up the chart\n        if (this.waveData.wave_height && this.windData.wind_speed_10m) {\n          this.setupChart();\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    },\n    setupChart() {\n      const waveHeights = this.waveData.wave_height || [];\n      const colors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120;\n        const waveGrade = getWaveQuality(\n          windDirection,\n          windSpeed,\n          wavePeriod,\n          beachAngle,\n          height\n        );\n        return waveGrade === \"green\"\n          ? \"#2ecc71\"\n          : waveGrade === \"yellow\"\n          ? \"#f1c40f\"\n          : \"#e74c3c\";\n      });\n\n      const labels = this.waveData.time.map((time) => {\n        const date = new Date(time);\n        return date.toLocaleTimeString(\"en-US\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        });\n      });\n\n      const days = [];\n      for (let i = 0; i < labels.length; i += 8) {\n        const date = new Date(this.waveData.time[i]);\n        const dayLabel = date.toLocaleDateString(\"en-US\", {\n          weekday: \"short\",\n          month: \"short\",\n          day: \"numeric\",\n        });\n        days.push({ title: dayLabel, cols: 8 });\n      }\n\n      this.chartSeries = [\n        {\n          name: \"Wave Height (ft)\",\n          data: waveHeights,\n        },\n      ];\n\n      this.chartOptions = {\n        chart: {\n          type: \"bar\",\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            distributed: true,\n          },\n        },\n        xaxis: {\n          categories: labels,\n          tickPlacement: \"on\",\n          group: {\n            style: {\n              fontSize: \"10px\",\n              fontWeight: 700,\n            },\n            groups: days, // Set up day groupings on the x-axis\n          },\n        },\n        colors: colors,\n        tooltip: {\n          custom: ({ dataPointIndex }) => {\n            const waveHeight = this.waveData.wave_height[dataPointIndex];\n            const wavePeriod = this.waveData.wave_period[dataPointIndex];\n            const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n            const windDirectionDegrees =\n              this.windData.wind_direction_10m[dataPointIndex];\n            const windDirectionCardinal =\n              this.convertDegreesToCardinal(windDirectionDegrees);\n\n            const date = new Date(this.waveData.time[dataPointIndex]);\n            const dayLabel = date.toLocaleDateString(\"en-US\", {\n              weekday: \"short\",\n              month: \"short\",\n              day: \"numeric\",\n            });\n            const timeLabel = date.toLocaleTimeString(\"en-US\", {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            });\n\n            return `<div style=\"padding:8px; border-radius: 4px; background: #fff;\">\n              <div style=\"font-weight: bold; font-size: 14px; margin-bottom: 6px;\">\n                ${dayLabel}, ${timeLabel}\n              </div>\n              <strong>Height:</strong> ${waveHeight} ft<br>\n              <strong>Period:</strong> ${wavePeriod} s<br>\n              <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n              <strong>Wind Direction:</strong> ${windDirectionCardinal} (${windDirectionDegrees}Â°)\n            </div>`;\n          },\n        },\n        legend: {\n          show: false,\n        },\n        dataLabels: {\n          enabled: false,\n        },\n      };\n\n      // Adjust chart width dynamically for responsiveness\n      this.chartMinWidth = window.innerWidth < 768 ? \"100%\" : \"600px\";\n    },\n    convertDegreesToCardinal(degrees) {\n      const directions = [\n        \"N\",\n        \"NNE\",\n        \"NE\",\n        \"ENE\",\n        \"E\",\n        \"ESE\",\n        \"SE\",\n        \"SSE\",\n        \"S\",\n        \"SSW\",\n        \"SW\",\n        \"WSW\",\n        \"W\",\n        \"WNW\",\n        \"NW\",\n        \"NNW\",\n      ];\n      const index = Math.round((degrees % 360) / 22.5);\n      return directions[index];\n    },\n  },\n};\n</script>\n\n<style scoped>\n.hover-details {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;EASSC,KAAK,EAAC;;;;uBARbC,mBAAA,CAuBM;IAtBJD,KAAK,EAAC,kDAAkD;IACvDE,KAAK,EAHVC,eAAA;MAAAC,MAAA,EAGsBC,KAAA,CAAAC;IAAW;MAE7BC,mBAAA,0BAA6B,E,0BAC7BC,mBAAA,CAA4E;IAAxER,KAAK,EAAC;EAAwC,GAAC,sBAAoB,sBAEvEO,mBAAA,qBAAwB,EACkBF,KAAA,CAAAI,YAAY,IAAIJ,KAAA,CAAAK,WAAW,CAACC,MAAM,Q,cAA5EV,mBAAA,CASM,OATNW,UASM,GARJJ,mBAAA,CAOM;IAPAN,KAAK,EAVjBC,eAAA;MAAAU,QAAA,EAU+BR,KAAA,CAAAS;IAAa;MACpCC,YAAA,CAKEC,oBAAA;IAJAC,IAAI,EAAC,KAAK;IACTC,OAAO,EAAEb,KAAA,CAAAI,YAAY;IACrBU,MAAM,EAAEd,KAAA,CAAAK,WAAW;IACnBN,MAAM,EAAEgB,QAAA,CAAAC;gGAMfpB,mBAAA,CAEMqB,SAAA;IAvBVvB,GAAA;EAAA,IAoBIQ,mBAAA,qBAAwB,E,0BACxBC,mBAAA,CAEM;IAFMR,KAAK,EAAC;EAAkB,IAClCQ,mBAAA,CAAuB,WAApB,kBAAgB,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}