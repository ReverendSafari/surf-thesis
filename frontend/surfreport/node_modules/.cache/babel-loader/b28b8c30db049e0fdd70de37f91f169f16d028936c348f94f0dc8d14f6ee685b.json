{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport VueApexCharts from 'vue3-apexcharts';\nimport axios from 'axios';\nexport default {\n  components: {\n    ApexChart: VueApexCharts\n  },\n  props: {\n    beach: String // Beach name passed from parent\n  },\n  data() {\n    return {\n      chartSeries: [],\n      chartOptions: {},\n      tideData: []\n    };\n  },\n  mounted() {\n    this.fetchTideData();\n  },\n  methods: {\n    async fetchTideData() {\n      try {\n        const response = await axios.get(`https://your-api-url.com/tides/${this.beach}`);\n        const tideData = response.data.tides;\n        this.tideData = this.generateSmoothData(tideData);\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching tide data:', error);\n      }\n    },\n    generateSmoothData(tides) {\n      // Interpolate data for smooth tide transitions\n      const smoothData = [];\n      for (let i = 0; i < tides.length - 1; i++) {\n        const currentTide = tides[i];\n        const nextTide = tides[i + 1];\n        const currentTime = new Date(currentTide.time).getTime();\n        const nextTime = new Date(nextTide.time).getTime();\n        const currentHeight = parseFloat(currentTide.height);\n        const nextHeight = parseFloat(nextTide.height);\n\n        // Push the initial tide data point\n        smoothData.push({\n          x: currentTide.time,\n          y: currentHeight\n        });\n\n        // Interpolate points between current and next tide\n        const steps = 12; // Define the number of interpolated points\n        for (let j = 1; j < steps; j++) {\n          const timeStep = currentTime + (nextTime - currentTime) / steps * j;\n          const heightStep = currentHeight + (nextHeight - currentHeight) / steps * j;\n          smoothData.push({\n            x: new Date(timeStep).toISOString().slice(0, 16).replace('T', ' '),\n            y: heightStep.toFixed(2)\n          });\n        }\n      }\n\n      // Add the final tide point\n      smoothData.push({\n        x: tides[tides.length - 1].time,\n        y: parseFloat(tides[tides.length - 1].height)\n      });\n      return smoothData;\n    },\n    setupChart() {\n      this.chartSeries = [{\n        name: 'Tide Height (ft)',\n        data: this.tideData\n      }];\n      this.chartOptions = {\n        chart: {\n          type: 'line',\n          toolbar: {\n            show: false\n          }\n        },\n        stroke: {\n          curve: 'smooth',\n          // Smooth curve for wave-like effect\n          width: 2\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            datetimeFormatter: {\n              hour: 'HH:mm'\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: 'Tide Height (ft)'\n          }\n        },\n        tooltip: {\n          x: {\n            format: 'yyyy-MM-dd HH:mm'\n          },\n          y: {\n            formatter: val => `${val} ft`\n          }\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["VueApexCharts","axios","components","ApexChart","props","beach","String","data","chartSeries","chartOptions","tideData","mounted","fetchTideData","methods","response","get","tides","generateSmoothData","setupChart","error","console","smoothData","i","length","currentTide","nextTide","currentTime","Date","time","getTime","nextTime","currentHeight","parseFloat","height","nextHeight","push","x","y","steps","j","timeStep","heightStep","toISOString","slice","replace","toFixed","name","chart","type","toolbar","show","stroke","curve","width","xaxis","labels","datetimeFormatter","hour","yaxis","title","text","tooltip","format","formatter","val"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/TideComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\" style=\"height:500px;\">\n    <ApexChart\n      type=\"line\"\n      :options=\"chartOptions\"\n      :series=\"chartSeries\"\n      height=\"400\"\n    />\n  </div>\n</template>\n\n<script>\nimport VueApexCharts from 'vue3-apexcharts';\nimport axios from 'axios';\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String, // Beach name passed from parent\n  },\n  data() {\n    return {\n      chartSeries: [],\n      chartOptions: {},\n      tideData: [],\n    };\n  },\n  mounted() {\n    this.fetchTideData();\n  },\n  methods: {\n    async fetchTideData() {\n      try {\n        const response = await axios.get(`https://your-api-url.com/tides/${this.beach}`);\n        const tideData = response.data.tides;\n        this.tideData = this.generateSmoothData(tideData);\n        this.setupChart();\n      } catch (error) {\n        console.error('Error fetching tide data:', error);\n      }\n    },\n    generateSmoothData(tides) {\n      // Interpolate data for smooth tide transitions\n      const smoothData = [];\n      for (let i = 0; i < tides.length - 1; i++) {\n        const currentTide = tides[i];\n        const nextTide = tides[i + 1];\n        const currentTime = new Date(currentTide.time).getTime();\n        const nextTime = new Date(nextTide.time).getTime();\n        const currentHeight = parseFloat(currentTide.height);\n        const nextHeight = parseFloat(nextTide.height);\n\n        // Push the initial tide data point\n        smoothData.push({ x: currentTide.time, y: currentHeight });\n\n        // Interpolate points between current and next tide\n        const steps = 12; // Define the number of interpolated points\n        for (let j = 1; j < steps; j++) {\n          const timeStep = currentTime + ((nextTime - currentTime) / steps) * j;\n          const heightStep = currentHeight + ((nextHeight - currentHeight) / steps) * j;\n          smoothData.push({\n            x: new Date(timeStep).toISOString().slice(0, 16).replace('T', ' '),\n            y: heightStep.toFixed(2),\n          });\n        }\n      }\n\n      // Add the final tide point\n      smoothData.push({\n        x: tides[tides.length - 1].time,\n        y: parseFloat(tides[tides.length - 1].height),\n      });\n\n      return smoothData;\n    },\n    setupChart() {\n      this.chartSeries = [\n        {\n          name: 'Tide Height (ft)',\n          data: this.tideData,\n        },\n      ];\n      this.chartOptions = {\n        chart: {\n          type: 'line',\n          toolbar: {\n            show: false,\n          },\n        },\n        stroke: {\n          curve: 'smooth', // Smooth curve for wave-like effect\n          width: 2,\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            datetimeFormatter: {\n              hour: 'HH:mm',\n            },\n          },\n        },\n        yaxis: {\n          title: {\n            text: 'Tide Height (ft)',\n          },\n        },\n        tooltip: {\n          x: {\n            format: 'yyyy-MM-dd HH:mm',\n          },\n          y: {\n            formatter: (val) => `${val} ft`,\n          },\n        },\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}