{"ast":null,"code":"import axios from 'axios';\nexport default {\n  props: {\n    beach: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      tides: [] // Stores the fetched tide data\n    };\n  },\n  computed: {\n    // Filter high tides\n    highTides() {\n      return this.tides.filter(tide => tide.type === 'high');\n    },\n    // Filter low tides\n    lowTides() {\n      return this.tides.filter(tide => tide.type === 'low');\n    }\n  },\n  methods: {\n    // Fetch tide data from the API\n    async fetchTides() {\n      if (this.beach) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/tides/${this.beach.beach_name}`);\n          this.tides = response.data.tides;\n        } catch (error) {\n          console.error('Error fetching tides:', error);\n        }\n      }\n    },\n    // Format the tide time for display\n    formatTime(time) {\n      const date = new Date(time);\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  },\n  watch: {\n    // Refetch the tides whenever the beach changes\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchTides();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","beach","type","String","required","data","tides","computed","highTides","filter","tide","lowTides","methods","fetchTides","response","get","beach_name","error","console","formatTime","time","date","Date","toLocaleTimeString","hour","minute","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/TideComponent.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-start\">\n    <h3 class=\"text-center text-lg font-semibold mb-6 whitespace-nowrap\">Current Tide</h3>\n    \n    <!-- Check if we have tide data -->\n    <div v-if=\"tides.length > 0\">\n      <div>\n        <p class=\"text-gray-700 mb-2 whitespace-nowrap\">High Tides</p>\n        <ul class=\"text-lg font-bold mb-2 whitespace-nowrap\">\n          <li v-for=\"tide in highTides\" :key=\"tide.time\">\n            {{ formatTime(tide.time) }} - {{ tide.height }} ft\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"mt-4\">\n        <p class=\"text-gray-700 mb-2\">Low Tides</p>\n        <ul class=\"text-lg text-bold whitespace-nowrap\">\n          <li v-for=\"tide in lowTides\" :key=\"tide.time\">\n            {{ formatTime(tide.time) }} - {{ tide.height }} ft\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div v-else>\n      <p>No tide data available.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: {\n    beach: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      tides: [],  // Stores the fetched tide data\n    };\n  },\n  computed: {\n    // Filter high tides\n    highTides() {\n      return this.tides.filter(tide => tide.type === 'high');\n    },\n    // Filter low tides\n    lowTides() {\n      return this.tides.filter(tide => tide.type === 'low');\n    },\n  },\n  methods: {\n    // Fetch tide data from the API\n    async fetchTides() {\n      if (this.beach) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/tides/${this.beach.beach_name}`);\n          this.tides = response.data.tides;\n        } catch (error) {\n          console.error('Error fetching tides:', error);\n        }\n      }\n    },\n    // Format the tide time for display\n    formatTime(time) {\n      const date = new Date(time);\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    },\n  },\n  watch: {\n    // Refetch the tides whenever the beach changes\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchTides();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":"AAgCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE,CAAG;IACd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACF,KAAK,CAACG,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACR,IAAG,KAAM,MAAM,CAAC;IACxD,CAAC;IACD;IACAS,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACL,KAAK,CAACG,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACR,IAAG,KAAM,KAAK,CAAC;IACvD;EACF,CAAC;EACDU,OAAO,EAAE;IACP;IACA,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACZ,KAAK,EAAE;QACd,IAAI;UACF,MAAMa,QAAO,GAAI,MAAMf,KAAK,CAACgB,GAAG,CAAC,0EAA0E,IAAI,CAACd,KAAK,CAACe,UAAU,EAAE,CAAC;UACnI,IAAI,CAACV,KAAI,GAAIQ,QAAQ,CAACT,IAAI,CAACC,KAAK;QAClC,EAAE,OAAOW,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF,CAAC;IACD;IACAE,UAAUA,CAACC,IAAI,EAAE;MACf,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,IAAI,CAAC;MAC3B,OAAOC,IAAI,CAACE,kBAAkB,CAAC,EAAE,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC,CAAC;IAC5E;EACF,CAAC;EACDC,KAAK,EAAE;IACL;IACAzB,KAAK,EAAE;MACL0B,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACf,UAAU,CAAC,CAAC;MACnB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}