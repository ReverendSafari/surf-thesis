{"ast":null,"code":"import { Chart, BarController, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js'; // Import the grading function\n\nexport default {\n  props: {\n    beach: String,\n    // Beach name passed from the parent component\n    beachAngle: Number // Beach angle passed from the parent component\n  },\n  data() {\n    return {\n      waveData: [],\n      // Array to store wave data\n      windData: [],\n      // Array to store wind data\n      hoveredWave: null // Stores data for the hovered wave\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    // Fetch wave and wind data from the API\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n\n        // Parse the response data\n        const waveData = JSON.parse(waveResponse.data.waves); // Parse the wave response\n        const windData = JSON.parse(windResponse.data.wind); // Parse the wind response\n\n        // Store the parsed data in the component's state\n        this.waveData = waveData.hourly; // Storing the wave data\n        this.windData = windData.hourly; // Storing the wind data\n\n        console.log('Wave Data:', this.waveData);\n        console.log('Wind Data:', this.windData);\n\n        // Build the chart after the data is successfully fetched\n        this.buildChart();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        this.waveData = {\n          wave_height: [],\n          wave_period: []\n        }; // Fallback empty data\n        this.windData = {\n          wind_speed_10m: [],\n          wind_direction_10m: []\n        }; // Fallback empty data\n      }\n    },\n    // Build the bar chart using Chart.js\n    buildChart() {\n      const ctx = this.$refs.waveChart.getContext('2d');\n\n      // Register the necessary components from Chart.js\n      Chart.register(BarController, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n      // Prepare the datasets for the chart\n      const waveHeights = this.waveData.wave_height;\n      const labels = this.waveData.time.map(time => {\n        const date = new Date(time);\n        return date.toLocaleTimeString('en-US', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      });\n\n      // Apply the grading logic using getWaveQuality\n      const barColors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120; // Use actual beach angle data if available\n\n        // Get the wave quality using the utility function\n        const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n        // Map the grade to a color\n        return waveGrade === 'green' ? 'green' : waveGrade === 'yellow' ? 'yellow' : 'red'; // Default to red for poor waves\n      });\n\n      // Create a custom plugin to display day labels above grouped bars\n      const dayPlugin = {\n        id: 'dayLabels',\n        afterDraw: chart => {\n          const ctx = chart.ctx;\n          const xAxis = chart.scales['x']; // Get x-axis\n          const labels = chart.data.labels;\n          let currentDay = '';\n          labels.forEach((label, index) => {\n            const date = new Date(this.waveData.time[index]);\n            const dayLabel = date.toLocaleDateString('en-US', {\n              weekday: 'short',\n              month: 'short',\n              day: 'numeric'\n            });\n\n            // Only draw the day if it's different from the previous day\n            if (dayLabel !== currentDay) {\n              currentDay = dayLabel;\n              ctx.fillText(dayLabel, xAxis.getPixelForTick(index), chart.chartArea.top - 10);\n            }\n          });\n        }\n      };\n\n      // Register the custom plugin in the chart\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Wave Height (ft)',\n            data: waveHeights,\n            backgroundColor: barColors\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: tooltipItem => {\n                  const index = tooltipItem.dataIndex;\n                  const waveHeight = this.waveData.wave_height[index];\n                  const wavePeriod = this.waveData.wave_period[index];\n                  const windSpeed = this.windData.wind_speed_10m[index];\n                  const windDirection = this.windData.wind_direction_10m[index];\n                  return `Height: ${waveHeight} ft, Period: ${wavePeriod} s, Wind: ${windSpeed} kn, Dir: ${windDirection}°`;\n                }\n              }\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                callback: function (value, index) {\n                  const date = new Date(this.waveData.time[index]);\n                  return date.toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  });\n                }\n              }\n            }\n          }\n        },\n        plugins: [dayPlugin] // Add the custom plugin for day labels\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","BarController","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","axios","getWaveQuality","props","beach","String","beachAngle","Number","data","waveData","windData","hoveredWave","mounted","fetchData","methods","waveResponse","get","windResponse","JSON","parse","waves","wind","hourly","console","log","buildChart","error","wave_height","wave_period","wind_speed_10m","wind_direction_10m","ctx","$refs","waveChart","getContext","register","waveHeights","labels","time","map","date","Date","toLocaleTimeString","hour","minute","barColors","height","index","windSpeed","windDirection","wavePeriod","waveGrade","dayPlugin","id","afterDraw","chart","xAxis","scales","currentDay","forEach","label","dayLabel","toLocaleDateString","weekday","month","day","fillText","getPixelForTick","chartArea","top","type","datasets","backgroundColor","options","responsive","plugins","tooltip","callbacks","tooltipItem","dataIndex","waveHeight","x","ticks","callback","value"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\">\n    <!-- Set the height directly in the canvas tag -->\n    <canvas ref=\"waveChart\" style=\"height: 100px;\"></canvas>\n  \n    <!-- Detailed Wave Summary on Hover (Optional) -->\n    <div v-if=\"hoveredWave\" class=\"hover-details\">\n      <p><strong>Wave Height:</strong> {{ hoveredWave.height }} ft</p>\n      <p><strong>Wave Period:</strong> {{ hoveredWave.period }} seconds</p>\n      <p><strong>Wind Speed:</strong> {{ hoveredWave.wind_speed }} kn</p>\n      <p><strong>Wind Direction:</strong> {{ hoveredWave.wind_direction }}°</p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { Chart, BarController, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n  import axios from 'axios';\n  import { getWaveQuality } from '../utils/waveGrading.js'; // Import the grading function\n\n  export default {\n    props: {\n      beach: String,  // Beach name passed from the parent component\n      beachAngle: Number  // Beach angle passed from the parent component\n    },\n    data() {\n      return {\n        waveData: [],  // Array to store wave data\n        windData: [],  // Array to store wind data\n        hoveredWave: null,  // Stores data for the hovered wave\n      };\n    },\n    mounted() {\n      this.fetchData();\n    },\n    methods: {\n      // Fetch wave and wind data from the API\n      async fetchData() {\n        try {\n          const waveResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n          const windResponse = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n          \n          // Parse the response data\n          const waveData = JSON.parse(waveResponse.data.waves); // Parse the wave response\n          const windData = JSON.parse(windResponse.data.wind);   // Parse the wind response\n\n          // Store the parsed data in the component's state\n          this.waveData = waveData.hourly;  // Storing the wave data\n          this.windData = windData.hourly;  // Storing the wind data\n\n          console.log('Wave Data:', this.waveData);\n          console.log('Wind Data:', this.windData);\n\n          // Build the chart after the data is successfully fetched\n          this.buildChart();\n        } catch (error) {\n          console.error('Error fetching data:', error);\n          this.waveData = { wave_height: [], wave_period: [] }; // Fallback empty data\n          this.windData = { wind_speed_10m: [], wind_direction_10m: [] }; // Fallback empty data\n        }\n      },\n\n      // Build the bar chart using Chart.js\n      buildChart() {\n        const ctx = this.$refs.waveChart.getContext('2d');\n\n        // Register the necessary components from Chart.js\n        Chart.register(BarController, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n        // Prepare the datasets for the chart\n        const waveHeights = this.waveData.wave_height;\n        const labels = this.waveData.time.map(time => {\n          const date = new Date(time);\n          return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n        });\n\n        // Apply the grading logic using getWaveQuality\n        const barColors = waveHeights.map((height, index) => {\n          const windSpeed = this.windData.wind_speed_10m[index];\n          const windDirection = this.windData.wind_direction_10m[index];\n          const wavePeriod = this.waveData.wave_period[index];\n          const beachAngle = this.beachAngle || 120;  // Use actual beach angle data if available\n\n          // Get the wave quality using the utility function\n          const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n          // Map the grade to a color\n          return waveGrade === 'green' ? 'green' :\n                 waveGrade === 'yellow' ? 'yellow' :\n                 'red';  // Default to red for poor waves\n        });\n\n        // Create a custom plugin to display day labels above grouped bars\n        const dayPlugin = {\n          id: 'dayLabels',\n          afterDraw: (chart) => {\n            const ctx = chart.ctx;\n            const xAxis = chart.scales['x']; // Get x-axis\n            const labels = chart.data.labels;\n            let currentDay = '';\n            \n            labels.forEach((label, index) => {\n              const date = new Date(this.waveData.time[index]);\n              const dayLabel = date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n              \n              // Only draw the day if it's different from the previous day\n              if (dayLabel !== currentDay) {\n                currentDay = dayLabel;\n                ctx.fillText(dayLabel, xAxis.getPixelForTick(index), chart.chartArea.top - 10);\n              }\n            });\n          }\n        };\n\n        // Register the custom plugin in the chart\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Wave Height (ft)',\n              data: waveHeights,\n              backgroundColor: barColors,\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  label: (tooltipItem) => {\n                    const index = tooltipItem.dataIndex;\n                    const waveHeight = this.waveData.wave_height[index];\n                    const wavePeriod = this.waveData.wave_period[index];\n                    const windSpeed = this.windData.wind_speed_10m[index];\n                    const windDirection = this.windData.wind_direction_10m[index];\n\n                    return `Height: ${waveHeight} ft, Period: ${wavePeriod} s, Wind: ${windSpeed} kn, Dir: ${windDirection}°`;\n                  }\n                }\n              }\n            },\n            scales: {\n              x: {\n                ticks: {\n                  callback: function(value, index) {\n                    const date = new Date(this.waveData.time[index]);\n                    return date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n                  }\n                }\n              }\n            }\n          },\n          plugins: [dayPlugin]  // Add the custom plugin for day labels\n        });\n      }\n    }\n  };\n</script>\n\n<style scoped>\n.hover-details {\n  margin-top: 20px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}