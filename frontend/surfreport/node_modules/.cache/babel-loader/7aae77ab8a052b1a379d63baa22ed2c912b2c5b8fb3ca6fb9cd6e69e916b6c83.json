{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6\"\n};\nconst _hoisted_2 = {\n  ref: \"waveChart\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"hover-details\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Bar Chart for Weekly Waves \"), _createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */), _createCommentVNode(\" Detailed Wave Summary on Hover (Optional) \"), $data.hoveredWave ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"strong\", null, \"Wave Height:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.height) + \" ft\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Wave Period:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.period) + \" seconds\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Wind Speed:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.wind_speed) + \" kn\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Wind Direction:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.hoveredWave.wind_direction) + \"°\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","$data","hoveredWave","_hoisted_3","_createTextVNode","_toDisplayString","height","period","wind_speed","wind_direction"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6\">\n  \n      <!-- Bar Chart for Weekly Waves -->\n      <canvas ref=\"waveChart\"></canvas>\n  \n      <!-- Detailed Wave Summary on Hover (Optional) -->\n      <div v-if=\"hoveredWave\" class=\"hover-details\">\n        <p><strong>Wave Height:</strong> {{ hoveredWave.height }} ft</p>\n        <p><strong>Wave Period:</strong> {{ hoveredWave.period }} seconds</p>\n        <p><strong>Wind Speed:</strong> {{ hoveredWave.wind_speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ hoveredWave.wind_direction }}°</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { Chart } from 'chart.js';\n  import axios from 'axios';\n  import { getWaveQuality } from '../utils/waveGrading.js'; // Import the grading function\n  \n  export default {\n    props: {\n      beach: String, // Beach name passed from the parent component\n      beachAngle: Number //Beach angle passed from the parent component\n    },\n    data() {\n      return {\n        waveData: [],  // Array to store wave data\n        windData: [],  // Array to store wind data\n        hoveredWave: null,  // Stores data for the hovered wave\n      };\n    },\n    mounted() {\n      this.fetchData();\n    },\n    methods: {\n  // Fetch wave and wind data from the API\n  async fetchData() {\n    try {\n        const waveResponse = await axios.get(`https://api-url/waves/${this.beach}`);\n        const windResponse = await axios.get(`https://api-url/wind/${this.beach}`);\n        // Continue with successful fetch\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        // Provide default or fallback data to render something\n        this.waveData = { hourly: { wave_height: [], wave_period: [] } };\n        this.windData = { hourly: { wind_speed_10m: [], wind_direction_10m: [] } };\n    }\n    },\n\n  // Build the bar chart using Chart.js\n  buildChart() {\n    const ctx = this.$refs.waveChart.getContext('2d');\n\n    // Prepare the datasets for the chart\n    const waveHeights = this.waveData.wave_height;\n    const labels = this.waveData.time.map(time => new Date(time).toLocaleDateString());\n\n    // Apply the grading logic using getWaveQuality\n    const barColors = waveHeights.map((height, index) => {\n      const windSpeed = this.windData.wind_speed_10m[index];\n      const windDirection = this.windData.wind_direction_10m[index];\n      const wavePeriod = this.waveData.wave_period[index];\n      const beachAngle = this.beachAngle || 120;  // Use actual beach angle data if available\n\n      // Get the wave quality using the utility function\n      const waveGrade = getWaveQuality(windDirection, windSpeed, wavePeriod, beachAngle, height);\n\n      // Map the grade to a color\n      return waveGrade === 'green' ? 'green' :\n             waveGrade === 'yellow' ? 'yellow' :\n             'red';  // Default to red for poor waves\n    });\n\n    new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Wave Height (ft)',\n          data: waveHeights,\n          backgroundColor: barColors,  // Use calculated colors based on grading\n        }]\n      },\n      options: {\n        responsive: true,\n        tooltips: {\n          callbacks: {\n            label: (tooltipItem) => {\n              const index = tooltipItem.index;\n              const waveHeight = this.waveData.wave_height[index];\n              const wavePeriod = this.waveData.wave_period[index];\n              const windSpeed = this.windData.wind_speed_10m[index];\n              const windDirection = this.windData.wind_direction_10m[index];\n\n              // Display the detailed wave info in the tooltip\n              this.hoveredWave = {\n                height: waveHeight,\n                period: wavePeriod,\n                wind_speed: windSpeed,\n                wind_direction: windDirection,\n              };\n\n              return `Height: ${waveHeight} ft, Period: ${wavePeriod} s, Wind: ${windSpeed} kn, Dir: ${windDirection}°`;\n            }\n          }\n        }\n      }\n    });\n  }\n}\n\n  };\n  </script>\n  \n  <style scoped>\n  .hover-details {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    background-color: #f9f9f9;\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAK;;EAGNC,GAAG,EAAC;AAAW;;EAJ7BC,GAAA;EAO8BF,KAAK,EAAC;;;uBANhCG,mBAAA,CAYM,OAZNC,UAYM,GAVJC,mBAAA,gCAAmC,EACnCC,mBAAA,CAAiC,UAAjCC,UAAiC,+BAEjCF,mBAAA,+CAAkD,EACvCG,KAAA,CAAAC,WAAW,I,cAAtBN,mBAAA,CAKM,OALNO,UAKM,GAJJJ,mBAAA,CAAgE,Y,0BAA7DA,mBAAA,CAA6B,gBAArB,cAAY,sBAR/BK,gBAAA,CAQwC,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACI,MAAM,IAAG,KAAG,gB,GAC5DP,mBAAA,CAAqE,Y,0BAAlEA,mBAAA,CAA6B,gBAArB,cAAY,sBAT/BK,gBAAA,CASwC,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACK,MAAM,IAAG,UAAQ,gB,GACjER,mBAAA,CAAmE,Y,0BAAhEA,mBAAA,CAA4B,gBAApB,aAAW,sBAV9BK,gBAAA,CAUuC,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACM,UAAU,IAAG,KAAG,gB,GAC/DT,mBAAA,CAAyE,Y,0BAAtEA,mBAAA,CAAgC,gBAAxB,iBAAe,sBAXlCK,gBAAA,CAW2C,GAAC,GAAAC,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACO,cAAc,IAAG,GAAC,gB,OAX7EX,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}