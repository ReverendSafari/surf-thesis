{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-4 border rounded-lg bg-white shadow-md mx-auto flex flex-col h-full\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"flex-grow\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"text-center mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ApexChart = _resolveComponent(\"ApexChart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", {\n    class: \"text-lg font-semibold mb-2 text-center\"\n  }, \"Weekly Wave Forecast\", -1)), $data.chartOptions && $data.chartSeries.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_ApexChart, {\n    type: $data.chartType,\n    options: $data.chartOptions,\n    series: $data.chartSeries,\n    height: $options.chartHeightNumeric,\n    class: \"block\"\n  }, null, 8, [\"type\", \"options\", \"series\", \"height\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"Loading chart...\", -1)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","chartOptions","chartSeries","length","_hoisted_2","_createVNode","_component_ApexChart","type","chartType","options","series","height","$options","chartHeightNumeric","_hoisted_3","_cache"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/WeeklyWaveComponent.vue"],"sourcesContent":["<template>\n  <div\n    class=\"p-4 border rounded-lg bg-white shadow-md mx-auto flex flex-col h-full\"\n  >\n    <!-- Card Header -->\n    <h3 class=\"text-lg font-semibold mb-2 text-center\">Weekly Wave Forecast</h3>\n\n    <!-- Chart Container -->\n    <div v-if=\"chartOptions && chartSeries.length > 0\" class=\"flex-grow\">\n      <ApexChart\n        :type=\"chartType\"\n        :options=\"chartOptions\"\n        :series=\"chartSeries\"\n        :height=\"chartHeightNumeric\"\n        class=\"block\"\n      />\n    </div>\n\n    <!-- Loading Message -->\n    <div v-else class=\"text-center mt-4\">\n      <p>Loading chart...</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { getWaveQuality } from \"../utils/waveGrading.js\";\nimport VueApexCharts from \"vue3-apexcharts\";\n\nexport default {\n  components: {\n    ApexChart: VueApexCharts,\n  },\n  props: {\n    beach: String,\n    beachAngle: Number,\n  },\n  data() {\n    return {\n      waveData: [],\n      windData: [],\n      chartSeries: [],\n      chartOptions: null,\n      chartType: \"bar\", // Dynamically change type based on screen width\n      chartHeight: \"100%\", // Set height to auto-fill\n    };\n  },\n  computed: {\n    chartHeightNumeric() {\n      return this.chartType === \"bar\" && window.innerWidth < 768\n        ? 800 // Taller chart on mobile for readability\n        : \"100%\"; // Default to container height\n    },\n  },\n  mounted() {\n    this.fetchData();\n    this.setChartType();\n    window.addEventListener(\"resize\", this.setChartType);\n  },\n  beforeUnmount() {\n    window.removeEventListener(\"resize\", this.setChartType);\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const waveResponse = await axios.get(\n          `https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`\n        );\n        const windResponse = await axios.get(\n          `https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`\n        );\n        const waveData = JSON.parse(waveResponse.data.waves);\n        const windData = JSON.parse(windResponse.data.wind);\n\n        this.waveData = waveData.hourly || [];\n        this.windData = windData.hourly || [];\n\n        if (this.waveData.wave_height && this.windData.wind_speed_10m) {\n          this.setupChart();\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    },\n    setupChart() {\n      const waveHeights = this.waveData.wave_height || [];\n      const colors = waveHeights.map((height, index) => {\n        const windSpeed = this.windData.wind_speed_10m[index];\n        const windDirection = this.windData.wind_direction_10m[index];\n        const wavePeriod = this.waveData.wave_period[index];\n        const beachAngle = this.beachAngle || 120;\n        const waveGrade = getWaveQuality(\n          windDirection,\n          windSpeed,\n          wavePeriod,\n          beachAngle,\n          height\n        );\n        return waveGrade === \"green\"\n          ? \"#2ecc71\"\n          : waveGrade === \"yellow\"\n          ? \"#f1c40f\"\n          : \"#e74c3c\";\n      });\n\n      const labels = this.waveData.time.map((time) => {\n        const date = new Date(time);\n        return date.toLocaleTimeString(\"en-US\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        });\n      });\n\n      const days = [];\n      for (let i = 0; i < labels.length; i += 8) {\n        const date = new Date(this.waveData.time[i]);\n        const dayLabel = date.toLocaleDateString(\"en-US\", {\n          weekday: \"short\",\n          month: \"short\",\n          day: \"numeric\",\n        });\n        days.push({ title: dayLabel, cols: 8 });\n      }\n\n      this.chartSeries = [\n        {\n          name: \"Wave Height (ft)\",\n          data: waveHeights,\n        },\n      ];\n\n      this.chartOptions = {\n        chart: {\n          type: this.chartType,\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            distributed: true,\n            horizontal: this.chartType === \"bar\" && window.innerWidth < 768, // Horizontal bars on mobile\n          },\n        },\n        xaxis: {\n          categories: labels,\n          tickPlacement: \"on\",\n          group: {\n            style: {\n              fontSize: \"12px\",\n              fontWeight: 700,\n            },\n            groups: days,\n          },\n          labels: {\n            style: {\n              fontSize: \"10px\",\n            },\n          },\n        },\n        yaxis: {\n          labels: {\n            style: {\n              fontSize: \"12px\",\n            },\n          },\n        },\n        colors: colors,\n        tooltip: {\n          custom: ({ dataPointIndex }) => {\n            const waveHeight = this.waveData.wave_height[dataPointIndex];\n            const wavePeriod = this.waveData.wave_period[dataPointIndex];\n            const windSpeed = this.windData.wind_speed_10m[dataPointIndex];\n            const windDirectionDegrees =\n              this.windData.wind_direction_10m[dataPointIndex];\n            const windDirectionCardinal =\n              this.convertDegreesToCardinal(windDirectionDegrees);\n\n            const date = new Date(this.waveData.time[dataPointIndex]);\n            const dayLabel = date.toLocaleDateString(\"en-US\", {\n              weekday: \"short\",\n              month: \"short\",\n              day: \"numeric\",\n            });\n            const timeLabel = date.toLocaleTimeString(\"en-US\", {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            });\n\n            return `<div style=\"padding:8px; border-radius: 4px; background: #fff;\">\n              <div style=\"font-weight: bold; font-size: 14px; margin-bottom: 6px;\">\n                ${dayLabel}, ${timeLabel}\n              </div>\n              <strong>Height:</strong> ${waveHeight} ft<br>\n              <strong>Period:</strong> ${wavePeriod} s<br>\n              <strong>Wind Speed:</strong> ${windSpeed} kn<br>\n              <strong>Wind Direction:</strong> ${windDirectionCardinal} (${windDirectionDegrees}Â°)\n            </div>`;\n          },\n        },\n        legend: {\n          show: false,\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        responsive: [\n          {\n            breakpoint: 768,\n            options: {\n              chart: {\n                height: 800,\n              },\n              plotOptions: {\n                bar: {\n                  horizontal: true,\n                },\n              },\n            },\n          },\n        ],\n      };\n    },\n    setChartType() {\n      this.chartType = window.innerWidth < 768 ? \"bar\" : \"bar\";\n    },\n    convertDegreesToCardinal(degrees) {\n      const directions = [\n        \"N\",\n        \"NNE\",\n        \"NE\",\n        \"ENE\",\n        \"E\",\n        \"ESE\",\n        \"SE\",\n        \"SSE\",\n        \"S\",\n        \"SSW\",\n        \"SW\",\n        \"WSW\",\n        \"W\",\n        \"WNW\",\n        \"NW\",\n        \"NNW\",\n      ];\n      const index = Math.round((degrees % 360) / 22.5);\n      return directions[index];\n    },\n  },\n};\n</script>\n\n<style scoped>\n.flex-grow {\n  flex-grow: 1;\n}\n</style>\n"],"mappings":";;EAEIA,KAAK,EAAC;AAAuE;;EAFjFC,GAAA;EAQuDD,KAAK,EAAC;;;EAR7DC,GAAA;EAmBgBD,KAAK,EAAC;;;;uBAlBpBE,mBAAA,CAqBM,OArBNC,UAqBM,G,0BAjBJC,mBAAA,CAA4E;IAAxEJ,KAAK,EAAC;EAAwC,GAAC,sBAAoB,QAG5DK,KAAA,CAAAC,YAAY,IAAID,KAAA,CAAAE,WAAW,CAACC,MAAM,Q,cAA7CN,mBAAA,CAQM,OARNO,UAQM,GAPJC,YAAA,CAMEC,oBAAA;IALCC,IAAI,EAAEP,KAAA,CAAAQ,SAAS;IACfC,OAAO,EAAET,KAAA,CAAAC,YAAY;IACrBS,MAAM,EAAEV,KAAA,CAAAE,WAAW;IACnBS,MAAM,EAAEC,QAAA,CAAAC,kBAAkB;IAC3BlB,KAAK,EAAC;2EAKVE,mBAAA,CAEM,OAFNiB,UAEM,EAAAC,MAAA,QAAAA,MAAA,OADJhB,mBAAA,CAAuB,WAApB,kBAAgB,M","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}