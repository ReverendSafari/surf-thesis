{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      beaches: [],\n      // Holds the fetched beach data\n      selectedBeach: null,\n      // Now this will hold the full beach object, not just the name\n      isMobile: false // Track whether the screen is mobile\n    };\n  },\n  methods: {\n    // Fetch beaches from the API\n    async fetchBeaches() {\n      try {\n        const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n        this.beaches = response.data.beaches;\n        if (this.beaches.length > 0) {\n          const queryBeachName = this.$route.query.beach;\n\n          // Match the query parameter with the beach list, or default to the first\n          const matchedBeach = this.beaches.find(beach => beach.beach_name === queryBeachName);\n          this.selectedBeach = matchedBeach || this.beaches[0];\n          this.updateBeach(); // Ensure the selected beach is emitted and the URL is updated\n        }\n      } catch (error) {\n        console.error('Error fetching beaches:', error);\n      }\n    },\n    // Emit the entire selected beach object to the parent component\n    updateBeach() {\n      if (this.selectedBeach) {\n        this.$emit('beachSelected', this.selectedBeach); // Emit the selected beach\n        this.$router.replace({\n          query: {\n            beach: this.selectedBeach.beach_name\n          }\n        }); // Update the URL without reloading\n      }\n    },\n    // Check for mobile screen size\n    updateIsMobile() {\n      this.isMobile = window.innerWidth < 768;\n    }\n  },\n  mounted() {\n    // Fetch beaches when the component is mounted\n    this.fetchBeaches();\n\n    // Check initial screen size and add resize listener\n    this.updateIsMobile();\n    window.addEventListener('resize', this.updateIsMobile);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.updateIsMobile);\n  }\n};","map":{"version":3,"names":["axios","data","beaches","selectedBeach","isMobile","methods","fetchBeaches","response","get","length","queryBeachName","$route","query","beach","matchedBeach","find","beach_name","updateBeach","error","console","$emit","$router","replace","updateIsMobile","window","innerWidth","mounted","addEventListener","beforeUnmount","removeEventListener"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/BeachSelector.vue"],"sourcesContent":["<template>\n  <div\n    class=\"relative h-20 w-full bg-cover bg-center flex items-center justify-center\"\n    :class=\"{ 'h-32': isMobile }\"\n    :style=\"{ backgroundImage: `url(${require('@/assets/selectorBackground.jpg')})`, backgroundPosition: 'center' }\"\n  >\n    <!-- Overlay for dimming effect on the background image -->\n    <div class=\"absolute inset-0 bg-black opacity-30\"></div>\n\n    <!-- Centered content with dropdown and integrated search icon -->\n    <div class=\"relative z-10 flex flex-col items-center\">\n      <div\n        class=\"relative w-1112 max-w-md\"\n        :class=\"{ 'mt-2': isMobile }\"\n      >\n        <!-- Icon inside the select box -->\n        <img\n          src=\"@/assets/search.svg\"\n          alt=\"Search icon\"\n          class=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-500\"\n        />\n\n        <!-- Beach Dropdown -->\n        <select\n          v-if=\"beaches.length > 0\"\n          v-model=\"selectedBeach\"\n          @change=\"updateBeach\"\n          class=\"bg-white text-gray-700 pl-10 pr-4 py-2 border rounded-lg shadow-md w-full focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n        >\n          <option v-for=\"beach in beaches\" :key=\"beach.beach_name\" :value=\"beach\">\n            {{ beach.beach_name }} ({{ beach.town }})\n          </option>\n        </select>\n\n        <div v-else class=\"text-gray-700 text-sm text-center\">Loading beaches...</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      beaches: [], // Holds the fetched beach data\n      selectedBeach: null, // Now this will hold the full beach object, not just the name\n      isMobile: false, // Track whether the screen is mobile\n    };\n  },\n  methods: {\n    // Fetch beaches from the API\n    async fetchBeaches() {\n      try {\n        const response = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n        this.beaches = response.data.beaches;\n\n        if (this.beaches.length > 0) {\n          const queryBeachName = this.$route.query.beach;\n\n          // Match the query parameter with the beach list, or default to the first\n          const matchedBeach = this.beaches.find(beach => beach.beach_name === queryBeachName);\n          this.selectedBeach = matchedBeach || this.beaches[0];\n\n          this.updateBeach(); // Ensure the selected beach is emitted and the URL is updated\n        }\n      } catch (error) {\n        console.error('Error fetching beaches:', error);\n      }\n    },\n\n    // Emit the entire selected beach object to the parent component\n    updateBeach() {\n      if (this.selectedBeach) {\n        this.$emit('beachSelected', this.selectedBeach); // Emit the selected beach\n        this.$router.replace({ query: { beach: this.selectedBeach.beach_name } }); // Update the URL without reloading\n      }\n    },\n\n    // Check for mobile screen size\n    updateIsMobile() {\n      this.isMobile = window.innerWidth < 768;\n    },\n  },\n  mounted() {\n    // Fetch beaches when the component is mounted\n    this.fetchBeaches();\n\n    // Check initial screen size and add resize listener\n    this.updateIsMobile();\n    window.addEventListener('resize', this.updateIsMobile);\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.updateIsMobile);\n  },\n};\n</script>\n\n<style scoped>\n/* Adjust the height and padding for mobile screens only */\n@media (max-width: 768px) {\n  .relative {\n    height: 12rem; /* Make the banner taller on mobile */\n  }\n\n  select {\n    padding: 0.5rem 0.75rem; /* Adjust the dropdown height */\n  }\n\n  .w-1112 {\n    margin-top: 0.5rem; /* Add slight top margin for mobile */\n  }\n}\n\n/* Desktop remains unchanged */\n.bg-cover {\n  background-size: cover;\n  background-position: center bottom;\n}\n</style>\n"],"mappings":"AAyCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MAAE;MACbC,aAAa,EAAE,IAAI;MAAE;MACrBC,QAAQ,EAAE,KAAK,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMP,KAAK,CAACQ,GAAG,CAAC,0EAA0E,CAAC;QAC5G,IAAI,CAACN,OAAM,GAAIK,QAAQ,CAACN,IAAI,CAACC,OAAO;QAEpC,IAAI,IAAI,CAACA,OAAO,CAACO,MAAK,GAAI,CAAC,EAAE;UAC3B,MAAMC,cAAa,GAAI,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,KAAK;;UAE9C;UACA,MAAMC,YAAW,GAAI,IAAI,CAACZ,OAAO,CAACa,IAAI,CAACF,KAAI,IAAKA,KAAK,CAACG,UAAS,KAAMN,cAAc,CAAC;UACpF,IAAI,CAACP,aAAY,GAAIW,YAAW,IAAK,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC;UAEpD,IAAI,CAACe,WAAW,CAAC,CAAC,EAAE;QACtB;MACF,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAED;IACAD,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACd,aAAa,EAAE;QACtB,IAAI,CAACiB,KAAK,CAAC,eAAe,EAAE,IAAI,CAACjB,aAAa,CAAC,EAAE;QACjD,IAAI,CAACkB,OAAO,CAACC,OAAO,CAAC;UAAEV,KAAK,EAAE;YAAEC,KAAK,EAAE,IAAI,CAACV,aAAa,CAACa;UAAW;QAAE,CAAC,CAAC,EAAE;MAC7E;IACF,CAAC;IAED;IACAO,cAAcA,CAAA,EAAG;MACf,IAAI,CAACnB,QAAO,GAAIoB,MAAM,CAACC,UAAS,GAAI,GAAG;IACzC;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACpB,YAAY,CAAC,CAAC;;IAEnB;IACA,IAAI,CAACiB,cAAc,CAAC,CAAC;IACrBC,MAAM,CAACG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACJ,cAAc,CAAC;EACxD,CAAC;EACDK,aAAaA,CAAA,EAAG;IACdJ,MAAM,CAACK,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACN,cAAc,CAAC;EAC3D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}