{"ast":null,"code":"import axios from 'axios';\nimport { getWaveQuality } from '../utils/waveGrading.js'; // Import the utility function\nimport GradeDisplay from './GradeDisplay.vue'; // Import the child component\n\nexport default {\n  props: {\n    beach: String // Beach name passed from the parent component\n  },\n  data() {\n    return {\n      waveData: [],\n      // Stores the fetched wave data\n      closestWave: null,\n      // Stores the closest wave data to the current time\n      waveGrade: '',\n      // Stores the wave quality grade\n      beachAngle: 0 // Stores the beach angle from the API\n    };\n  },\n  components: {\n    GradeDisplay\n  },\n  computed: {\n    // Compute the wave height range\n    waveHeightRange() {\n      const height = this.closestWave.height;\n      if (height < 1) return 'Flat';\n      if (height < 2) return '1-2 ft';\n      if (height < 3) return '2-3 ft';\n      if (height < 4) return '3-4 ft';\n      if (height < 6) return '4-6 ft';\n      return '6+ ft';\n    }\n  },\n  methods: {\n    // Fetch wave data from the API\n    async fetchWaves() {\n      try {\n        // Fetch the waves data\n        const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n        const waveData = JSON.parse(response.data.waves);\n        const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n\n        // Store the closest wave data\n        this.closestWave = {\n          time: waveData.hourly.time[closestTimeIndex],\n          height: waveData.hourly.wave_height[closestTimeIndex],\n          direction: waveData.hourly.wave_direction[closestTimeIndex],\n          period: waveData.hourly.wave_period[closestTimeIndex]\n        };\n\n        // Fetch the beach metadata (including beach angle)\n        const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n        const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach);\n        if (beachData) {\n          this.beachAngle = beachData.beach_angle; // Store the beach angle\n        }\n\n        // Calculate the wave quality grade using the utility function\n        this.waveGrade = getWaveQuality(this.closestWave.direction,\n        // Wind Direction\n        10,\n        // Example wind speed, replace with actual data if available\n        this.closestWave.period,\n        // Swell Period\n        this.beachAngle,\n        // Beach Orientation\n        this.closestWave.height // Wave Height\n        );\n      } catch (error) {\n        console.error('Error fetching wave or beach data:', error);\n      }\n    },\n    // Find the closest time index to the current time (EST)\n    findClosestTimeIndex(times) {\n      const currentTime = new Date(); // Get current time\n      const timeDifferences = times.map(time => {\n        const waveTime = new Date(time);\n        return Math.abs(waveTime - currentTime); // Calculate the difference in milliseconds\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences)); // Find the index with the smallest difference\n    }\n  },\n  watch: {\n    // Refetch the wave data whenever the beach changes\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWaves();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","getWaveQuality","GradeDisplay","props","beach","String","data","waveData","closestWave","waveGrade","beachAngle","components","computed","waveHeightRange","height","methods","fetchWaves","response","get","JSON","parse","waves","closestTimeIndex","findClosestTimeIndex","hourly","time","wave_height","direction","wave_direction","period","wave_period","beachResponse","beachData","beaches","find","b","beach_name","beach_angle","error","console","times","currentTime","Date","timeDifferences","map","waveTime","Math","abs","indexOf","min","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWaveComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6 border rounded-lg w-full max-w-md text-center mt-4\">\n      <h3 class=\"text-xl mb-4\">Current Wave Information for {{ beach }}</h3>\n  \n      <!-- Check if wave data is available -->\n      <div v-if=\"closestWave\">\n        <p><strong>Wave Height:</strong> {{ waveHeightRange }} ({{ closestWave.height }} ft)</p>\n        <p><strong>Wave Period:</strong> {{ closestWave.period }} seconds</p>\n        <p><strong>Wave Direction:</strong> <span :style=\"{ transform: 'rotate(' + closestWave.direction + 'deg)' }\">â†‘</span></p>\n  \n        <!-- GradeDisplay Component for Wave Quality -->\n        <GradeDisplay :grade=\"waveGrade\" />\n      </div>\n  \n      <div v-else>\n        <p>No wave data available.</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import { getWaveQuality } from '../utils/waveGrading.js'; // Import the utility function\n  import GradeDisplay from './GradeDisplay.vue'; // Import the child component\n  \n  export default {\n    props: {\n      beach: String, // Beach name passed from the parent component\n    },\n    data() {\n      return {\n        waveData: [], // Stores the fetched wave data\n        closestWave: null, // Stores the closest wave data to the current time\n        waveGrade: '', // Stores the wave quality grade\n        beachAngle: 0, // Stores the beach angle from the API\n      };\n    },\n    components: {\n      GradeDisplay,\n    },\n    computed: {\n      // Compute the wave height range\n      waveHeightRange() {\n        const height = this.closestWave.height;\n        if (height < 1) return 'Flat';\n        if (height < 2) return '1-2 ft';\n        if (height < 3) return '2-3 ft';\n        if (height < 4) return '3-4 ft';\n        if (height < 6) return '4-6 ft';\n        return '6+ ft';\n      },\n    },\n    methods: {\n      // Fetch wave data from the API\n      async fetchWaves() {\n        try {\n          // Fetch the waves data\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/waves/${this.beach}`);\n          const waveData = JSON.parse(response.data.waves);\n          const closestTimeIndex = this.findClosestTimeIndex(waveData.hourly.time);\n  \n          // Store the closest wave data\n          this.closestWave = {\n            time: waveData.hourly.time[closestTimeIndex],\n            height: waveData.hourly.wave_height[closestTimeIndex],\n            direction: waveData.hourly.wave_direction[closestTimeIndex],\n            period: waveData.hourly.wave_period[closestTimeIndex],\n          };\n  \n          // Fetch the beach metadata (including beach angle)\n          const beachResponse = await axios.get('https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/beaches');\n          const beachData = beachResponse.data.beaches.find(b => b.beach_name === this.beach);\n  \n          if (beachData) {\n            this.beachAngle = beachData.beach_angle; // Store the beach angle\n          }\n  \n          // Calculate the wave quality grade using the utility function\n          this.waveGrade = getWaveQuality(\n            this.closestWave.direction, // Wind Direction\n            10, // Example wind speed, replace with actual data if available\n            this.closestWave.period, // Swell Period\n            this.beachAngle, // Beach Orientation\n            this.closestWave.height // Wave Height\n          );\n        } catch (error) {\n          console.error('Error fetching wave or beach data:', error);\n        }\n      },\n      // Find the closest time index to the current time (EST)\n      findClosestTimeIndex(times) {\n        const currentTime = new Date(); // Get current time\n        const timeDifferences = times.map(time => {\n          const waveTime = new Date(time);\n          return Math.abs(waveTime - currentTime); // Calculate the difference in milliseconds\n        });\n        return timeDifferences.indexOf(Math.min(...timeDifferences)); // Find the index with the smallest difference\n      },\n    },\n    watch: {\n      // Refetch the wave data whenever the beach changes\n      beach: {\n        immediate: true,\n        handler() {\n          this.fetchWaves();\n        },\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Basic styling for MVP */\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}