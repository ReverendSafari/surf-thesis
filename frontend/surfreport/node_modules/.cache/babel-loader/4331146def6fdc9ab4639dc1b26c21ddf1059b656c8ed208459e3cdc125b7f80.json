{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-6 border rounded-lg w-full max-w-md text-center mt-4\"\n};\nconst _hoisted_2 = {\n  class: \"text-xl mb-4\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h3\", _hoisted_2, \"Current Wind Information for \" + _toDisplayString($props.beach), 1 /* TEXT */), _createCommentVNode(\" Check if wind data is available \"), $data.closestWind ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"strong\", null, \"Wind Speed:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.closestWind.speed) + \" kn\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Wind Direction:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($options.windDirectionLabel) + \" (\" + _toDisplayString($data.closestWind.direction) + \"°)\", 1 /* TEXT */)])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _cache[2] || (_cache[2] = [_createElementVNode(\"p\", null, \"No wind data available.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$props","beach","_createCommentVNode","$data","closestWind","_hoisted_3","_createTextVNode","speed","$options","windDirectionLabel","direction","_hoisted_4","_cache"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWindComponent.vue"],"sourcesContent":["<template>\n    <div class=\"p-6 border rounded-lg w-full max-w-md text-center mt-4\">\n      <h3 class=\"text-xl mb-4\">Current Wind Information for {{ beach }}</h3>\n  \n      <!-- Check if wind data is available -->\n      <div v-if=\"closestWind\">\n        <p><strong>Wind Speed:</strong> {{ closestWind.speed }} kn</p>\n        <p><strong>Wind Direction:</strong> {{ windDirectionLabel }} ({{ closestWind.direction }}°)</p>\n      </div>\n  \n      <div v-else>\n        <p>No wind data available.</p>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    props: {\n      beach: String, // Beach name passed from the parent component\n    },\n    data() {\n      return {\n        windData: [], // Stores the fetched wind data\n        closestWind: null, // Stores the closest wind data to the current time\n      };\n    },\n    computed: {\n      // Compute the cardinal direction label from degrees\n      windDirectionLabel() {\n        if (!this.closestWind) return '';\n        const direction = this.closestWind.direction;\n        return this.convertDegreesToCardinal(direction);\n      },\n    },\n    methods: {\n      // Fetch wind data from the API\n      async fetchWind() {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach}`);\n          const windData = JSON.parse(response.data.wind);\n  \n          // Find the closest wind data point\n          const closestTimeIndex = this.findClosestTimeIndex(windData.hourly.time);\n          this.closestWind = {\n            time: windData.hourly.time[closestTimeIndex],\n            speed: windData.hourly.wind_speed_10m[closestTimeIndex],\n            direction: windData.hourly.wind_direction_10m[closestTimeIndex],\n          };\n        } catch (error) {\n          console.error('Error fetching wind data:', error);\n        }\n      },\n  \n      // Find the closest time index to the current time (EST)\n      findClosestTimeIndex(times) {\n        const currentTime = new Date();\n        const timeDifferences = times.map(time => {\n          const windTime = new Date(time);\n          return Math.abs(windTime - currentTime);\n        });\n        return timeDifferences.indexOf(Math.min(...timeDifferences));\n      },\n  \n      // Convert degrees to cardinal direction\n      convertDegreesToCardinal(degrees) {\n        const directions = [\n          'N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',\n          'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'\n        ];\n        const index = Math.round((degrees % 360) / 22.5);\n        return directions[index];\n      },\n    },\n    watch: {\n      // Refetch the wind data whenever the beach changes\n      beach: {\n        immediate: true,\n        handler() {\n          this.fetchWind();\n        },\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  /* Basic styling for MVP */\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAwD;;EAC7DA,KAAK,EAAC;AAAc;;EAF9BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACIC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,mBAAA,CAAsE,MAAtEC,UAAsE,EAA7C,+BAA6B,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,kBAE9DC,mBAAA,qCAAwC,EAC7BC,KAAA,CAAAC,WAAW,I,cAAtBT,mBAAA,CAGM,OARZU,UAAA,GAMQR,mBAAA,CAA8D,Y,0BAA3DA,mBAAA,CAA4B,gBAApB,aAAW,sBAN9BS,gBAAA,CAMuC,GAAC,GAAAP,gBAAA,CAAGI,KAAA,CAAAC,WAAW,CAACG,KAAK,IAAG,KAAG,gB,GAC1DV,mBAAA,CAA+F,Y,0BAA5FA,mBAAA,CAAgC,gBAAxB,iBAAe,sBAPlCS,gBAAA,CAO2C,GAAC,GAAAP,gBAAA,CAAGS,QAAA,CAAAC,kBAAkB,IAAG,IAAE,GAAAV,gBAAA,CAAGI,KAAA,CAAAC,WAAW,CAACM,SAAS,IAAG,IAAE,gB,sBAG7Ff,mBAAA,CAEM,OAZZgB,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAWQf,mBAAA,CAA8B,WAA3B,yBAAuB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}