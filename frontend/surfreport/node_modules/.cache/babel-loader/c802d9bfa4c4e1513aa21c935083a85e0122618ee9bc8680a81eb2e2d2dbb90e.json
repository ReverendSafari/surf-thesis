{"ast":null,"code":"import axios from 'axios';\nexport default {\n  props: {\n    beach: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      airTemp: null,\n      waterTemp: null\n    };\n  },\n  computed: {\n    wetsuitRecommendation() {\n      if (this.waterTemp >= 70) {\n        return 'No Wetsuit needed';\n      } else if (this.waterTemp >= 65) {\n        return '2mm spring suit';\n      } else if (this.waterTemp >= 55) {\n        return '3/2mm  wetsuit';\n      } else if (this.waterTemp >= 48) {\n        return '4/3mm wetsuit with booties and gloves.';\n      } else if (this.waterTemp < 48) {\n        return '5/4mm wetsuit with booties, gloves, and a hood.';\n      } else {\n        return 'No recommendation available.';\n      }\n    }\n  },\n  methods: {\n    async fetchTemps() {\n      if (this.beach && this.beach.beach_name) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/temps/${this.beach.beach_name}`);\n          this.airTemp = response.data.air_temp;\n          this.waterTemp = response.data.water_temp;\n        } catch (error) {\n          console.error('Error fetching temperature data:', error);\n        }\n      }\n    }\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchTemps();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","beach","type","Object","required","data","airTemp","waterTemp","computed","wetsuitRecommendation","methods","fetchTemps","beach_name","response","get","air_temp","water_temp","error","console","watch","immediate","handler"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/TemperatureComponent.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-start\">\n    <h3 class=\"text-center text-lg font-semibold mb-6\">Temperature</h3>\n    <div v-if=\"airTemp !== null && waterTemp !== null\">\n      <p class=\"text-gray-600 whitespace-nowrap\">Air temperature</p>\n      <p class=\" font-bold mb-4\">{{ airTemp }}°F</p>\n      <p class=\"text-gray-600 whitespace-nowrap\">Water temperature</p>\n      <p class=\" font-bold mb-4\">{{ waterTemp }}°F</p>\n      <p class=\"text-gray-600 whitespace-nowrap\">Wetsuit Recommendation</p>\n      <p class=\"text-lg font-semibold text-blue-600\">{{ wetsuitRecommendation }}</p>\n    </div>\n    <div v-else>\n      <p>No temperature data available.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: {\n    beach: {\n      type: Object,\n      required: true\n    },\n  },\n  data() {\n    return {\n      airTemp: null,\n      waterTemp: null,\n    };\n  },\n  computed: {\n    wetsuitRecommendation() {\n      if (this.waterTemp >= 70) {\n        return 'No Wetsuit needed';\n      } else if (this.waterTemp >= 65) {\n        return '2mm spring suit';\n      } else if (this.waterTemp >= 55) {\n        return '3/2mm  wetsuit';\n      } else if (this.waterTemp >= 48) {\n        return '4/3mm wetsuit with booties and gloves.';\n      } else if (this.waterTemp < 48) {\n        return '5/4mm wetsuit with booties, gloves, and a hood.';\n      } else {\n        return 'No recommendation available.';\n      }\n    },\n  },\n  methods: {\n    async fetchTemps() {\n      if (this.beach && this.beach.beach_name) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/temps/${this.beach.beach_name}`);\n          this.airTemp = response.data.air_temp;\n          this.waterTemp = response.data.water_temp;\n        } catch (error) {\n          console.error('Error fetching temperature data:', error);\n        }\n      }\n    },\n  },\n  watch: {\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchTemps();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":"AAkBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,qBAAqBA,CAAA,EAAG;MACtB,IAAI,IAAI,CAACF,SAAQ,IAAK,EAAE,EAAE;QACxB,OAAO,mBAAmB;MAC5B,OAAO,IAAI,IAAI,CAACA,SAAQ,IAAK,EAAE,EAAE;QAC/B,OAAO,iBAAiB;MAC1B,OAAO,IAAI,IAAI,CAACA,SAAQ,IAAK,EAAE,EAAE;QAC/B,OAAO,gBAAgB;MACzB,OAAO,IAAI,IAAI,CAACA,SAAQ,IAAK,EAAE,EAAE;QAC/B,OAAO,wCAAwC;MACjD,OAAO,IAAI,IAAI,CAACA,SAAQ,GAAI,EAAE,EAAE;QAC9B,OAAO,iDAAiD;MAC1D,OAAO;QACL,OAAO,8BAA8B;MACvC;IACF;EACF,CAAC;EACDG,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACV,KAAI,IAAK,IAAI,CAACA,KAAK,CAACW,UAAU,EAAE;QACvC,IAAI;UACF,MAAMC,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,0EAA0E,IAAI,CAACb,KAAK,CAACW,UAAU,EAAE,CAAC;UACnI,IAAI,CAACN,OAAM,GAAIO,QAAQ,CAACR,IAAI,CAACU,QAAQ;UACrC,IAAI,CAACR,SAAQ,GAAIM,QAAQ,CAACR,IAAI,CAACW,UAAU;QAC3C,EAAE,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QAC1D;MACF;IACF;EACF,CAAC;EACDE,KAAK,EAAE;IACLlB,KAAK,EAAE;MACLmB,SAAS,EAAE,IAAI;MACfC,OAAOA,CAAA,EAAG;QACR,IAAI,CAACV,UAAU,CAAC,CAAC;MACnB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}