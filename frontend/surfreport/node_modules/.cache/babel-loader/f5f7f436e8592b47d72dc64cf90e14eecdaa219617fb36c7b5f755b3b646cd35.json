{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex flex-col items-start\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"text-2xl font-bold mb-4\"\n};\nconst _hoisted_4 = {\n  class: \"text-2xl font-bold\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", {\n    class: \"text-center text-lg font-semibold mb-6\"\n  }, \"Current Wind\", -1 /* HOISTED */)), _createCommentVNode(\" Check if wind data is available \"), $data.closestWind ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[0] || (_cache[0] = _createElementVNode(\"p\", {\n    class: \"text-gray-600\"\n  }, \"Wind Speed\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_3, _toDisplayString($data.closestWind.speed) + \" kn\", 1 /* TEXT */), _cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n    class: \"text-gray-600\"\n  }, \"Wind Direction\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_4, _toDisplayString($options.windDirectionLabel) + \" (\" + _toDisplayString($data.closestWind.direction) + \"°)\", 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, _cache[2] || (_cache[2] = [_createElementVNode(\"p\", null, \"No wind data available.\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","$data","closestWind","_hoisted_2","_hoisted_3","_toDisplayString","speed","_hoisted_4","$options","windDirectionLabel","direction","_hoisted_5","_cache"],"sources":["/home/safari/thesis/frontend/surfreport/src/components/CurrentWindComponent.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-start\">\n    <h3 class=\"text-center text-lg font-semibold mb-6\">Current Wind</h3>\n    \n    <!-- Check if wind data is available -->\n    <div v-if=\"closestWind\">\n      <p class=\"text-gray-600\">Wind Speed</p>\n      <p class=\"text-2xl font-bold mb-4\">{{ closestWind.speed }} kn</p>\n      <p class=\"text-gray-600\">Wind Direction</p>\n      <p class=\"text-2xl font-bold\">{{ windDirectionLabel }} ({{ closestWind.direction }}°)</p>\n    </div>\n  \n    <div v-else>\n      <p>No wind data available.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: {\n    beach: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      windData: [], // Stores the fetched wind data\n      closestWind: null, // Stores the closest wind data to the current time\n    };\n  },\n  computed: {\n    // Compute the cardinal direction label from degrees\n    windDirectionLabel() {\n      if (!this.closestWind) return '';\n      const direction = this.closestWind.direction;\n      return this.convertDegreesToCardinal(direction);\n    },\n  },\n  methods: {\n    // Fetch wind data from the API\n    async fetchWind() {\n      if (this.beach) {\n        try {\n          const response = await axios.get(`https://3k7dz8sjwk.execute-api.us-east-2.amazonaws.com/TestStage/wind/${this.beach.beach_name}`);\n          const windData = JSON.parse(response.data.wind);\n  \n          // Find the closest wind data point\n          const closestTimeIndex = this.findClosestTimeIndex(windData.hourly.time);\n          this.closestWind = {\n            time: windData.hourly.time[closestTimeIndex],\n            speed: windData.hourly.wind_speed_10m[closestTimeIndex],\n            direction: windData.hourly.wind_direction_10m[closestTimeIndex],\n          };\n        } catch (error) {\n          console.error('Error fetching wind data:', error);\n        }\n      }\n    },\n\n    // Find the closest time index to the current time (EST)\n    findClosestTimeIndex(times) {\n      const currentTime = new Date();\n      const timeDifferences = times.map(time => {\n        const windTime = new Date(time);\n        return Math.abs(windTime - currentTime);\n      });\n      return timeDifferences.indexOf(Math.min(...timeDifferences));\n    },\n\n    // Convert degrees to cardinal direction\n    convertDegreesToCardinal(degrees) {\n      const directions = [\n        'N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',\n        'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'\n      ];\n      const index = Math.round((degrees % 360) / 22.5);\n      return directions[index];\n    },\n  },\n  watch: {\n    // Refetch the wind data whenever the beach changes\n    beach: {\n      immediate: true,\n      handler() {\n        this.fetchWind();\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;500;700&display=swap');\n\n* {\n  font-family: 'Plus Jakarta Sans', sans-serif;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAA2B;;EADxCC,GAAA;AAAA;;EAOSD,KAAK,EAAC;AAAyB;;EAE/BA,KAAK,EAAC;AAAoB;;EATnCC,GAAA;AAAA;;uBACEC,mBAAA,CAcM,OAdNC,UAcM,G,0BAbJC,mBAAA,CAAoE;IAAhEJ,KAAK,EAAC;EAAwC,GAAC,cAAY,sBAE/DK,mBAAA,qCAAwC,EAC7BC,KAAA,CAAAC,WAAW,I,cAAtBL,mBAAA,CAKM,OAVVM,UAAA,G,0BAMMJ,mBAAA,CAAuC;IAApCJ,KAAK,EAAC;EAAe,GAAC,YAAU,sBACnCI,mBAAA,CAAiE,KAAjEK,UAAiE,EAAAC,gBAAA,CAA3BJ,KAAA,CAAAC,WAAW,CAACI,KAAK,IAAG,KAAG,iB,0BAC7DP,mBAAA,CAA2C;IAAxCJ,KAAK,EAAC;EAAe,GAAC,gBAAc,sBACvCI,mBAAA,CAAyF,KAAzFQ,UAAyF,EAAAF,gBAAA,CAAxDG,QAAA,CAAAC,kBAAkB,IAAG,IAAE,GAAAJ,gBAAA,CAAGJ,KAAA,CAAAC,WAAW,CAACQ,SAAS,IAAG,IAAE,gB,oBAGvFb,mBAAA,CAEM,OAdVc,UAAA,EAAAC,MAAA,QAAAA,MAAA,OAaMb,mBAAA,CAA8B,WAA3B,yBAAuB,oB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}